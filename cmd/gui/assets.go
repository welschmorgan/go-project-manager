// Code generated for package gui by go-bindata DO NOT EDIT. (@generated)
// sources:
// cmd/gui/web-app/app/main.js
// cmd/gui/web-app/app/pages/home/home.html
// cmd/gui/web-app/app/pages/home/home.js
// cmd/gui/web-app/app/pages/projects/projects.html
// cmd/gui/web-app/app/pages/projects/projects.js
// cmd/gui/web-app/app/pages/versions/versions.html
// cmd/gui/web-app/app/pages/versions/versions.js
// cmd/gui/web-app/app/style.css
// cmd/gui/web-app/index.html
package gui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _appMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x4c\xd2\x03\x29\xac\x2b\xa7\x3d\xc6\x50\x81\xc5\xa2\x45\x0a\x34\xc0\x02\x49\x7b\x29\x7a\xa0\xe9\xf1\x8a\x1b\x9a\x54\x49\xca\x89\x11\xe8\xbf\x17\x24\x45\x89\x94\x1d\xa7\x2d\x90\xbd\x2c\x38\xf3\xe6\xeb\xcd\x23\x2d\x2e\x99\xb5\xf0\xc8\x9e\x10\x3e\xaf\x00\xb8\x56\xd6\x99\x9e\x3b\x6d\xa8\x62\x47\x5c\x43\xeb\x8e\x72\x0d\x07\xe6\x4d\xe7\x2a\x80\x00\x5c\x2b\x6c\xed\xfd\xd0\x80\xff\x37\x1b\x3d\x1c\x9a\x10\x35\x1b\xc7\x68\x68\x52\x9e\xd9\x25\x94\x75\x4c\x71\x9f\xa8\x57\x7b\x3c\x08\x85\xfb\xed\x0a\x60\x58\x0d\xab\x55\x6c\xee\xbe\xeb\x2e\x7a\x2b\x1a\x39\x09\xfc\x08\x0d\xec\x35\xef\x8f\xa8\x5c\xfd\x77\x8f\xe6\xfc\x0e\x25\x06\x28\xf9\xce\xfb\x49\xb5\x9d\x03\x8e\x4c\xa8\xb7\xa8\xfa\x5b\x41\x1e\xf3\xfd\x11\x55\x5f\x44\xf2\xde\x18\x54\x2e\xf0\xd5\x80\xea\xa5\xcc\x9d\x8c\xb7\xb8\xf7\x3e\x0b\x0d\xfc\xf9\x57\xe6\x32\xba\x77\xd1\x1a\x6c\x00\x9f\x83\xe5\x35\x90\x56\x1f\x91\xac\x41\xb2\x1d\xca\xd7\x40\xde\xf8\xe3\xb0\x86\x25\xac\x33\xfa\x19\xb9\xb3\x19\xf4\x31\x99\xae\xc0\x4f\x68\xac\xd0\x2a\x87\xff\x91\x4c\xc3\x3a\xa0\xf3\xf6\xb8\x41\xe6\xd0\x53\x42\xf3\x69\x15\x3b\x89\x27\xe6\x90\xc6\x2e\xab\xb8\x18\xbf\x8a\x09\xff\xab\xc3\x23\x0d\x55\xc7\x4a\x69\x33\x61\x5b\x20\x45\xce\x71\x0c\xfb\x59\xa2\x3f\x51\x22\x45\xe2\x36\x82\x77\x4e\xdd\x40\xef\x7a\xe7\xb4\x4a\x11\x3b\xa7\x6a\xa1\x14\x9a\xf7\xf8\xc9\x41\x13\x6b\xcf\x2e\xad\xb8\x14\xfc\x03\x34\x40\x2b\x68\x7e\x5a\x8c\x13\xfa\x1d\x13\x49\x51\xb3\xae\x43\xb5\x7f\x68\x85\xdc\xd3\x9d\x53\xd7\x94\x52\x60\xa4\xb8\xc6\xc4\xa4\xc9\x83\x36\x40\xe3\x44\xa1\x10\xe8\x43\x2e\x82\x04\xbb\xa0\x7e\xa6\xb2\x1e\x09\x8d\x87\x48\x6b\x6c\x6a\x48\x75\x85\xf5\x3a\x7b\x08\x8a\x0b\x37\x35\xa5\x35\xe8\x7a\xa3\xe0\xc5\x8b\x90\xfd\x09\xdd\xc3\xa4\xca\x88\x4b\x19\xae\xb8\x2e\x07\xe8\xbc\xd0\x53\xff\x99\xbe\xe7\x21\xc4\x01\xa8\x47\x8d\xcf\x41\x13\x1f\x84\xd9\x3f\x75\xe4\x41\xdb\xd1\x38\x94\xc3\x4c\x8b\xc9\x43\xa7\xab\x1d\xf7\xfc\xe6\xfd\xdb\xdf\xa0\x01\x42\x62\x0e\x5f\x36\x3e\x20\x17\x44\xcc\xb5\xb3\x19\x1a\xf8\x12\x1f\xdb\x7c\x1b\x17\xf5\xc2\x68\xd3\x6b\x06\xf1\x9c\x1e\xad\x5a\x28\xe1\xd2\x8d\x19\x00\xa5\xc5\xa9\xf6\x38\xb5\xc2\x8f\xf0\x68\xf4\x51\x58\xa4\xd4\xa0\xd5\xf2\xe4\x17\x8b\xfe\xe6\x06\x65\xce\x3c\x49\x74\xc0\x75\xaf\x1c\x1a\x68\xe0\xd5\x76\x72\x14\x63\x84\x84\xa9\xf9\x35\x10\x52\x2d\x81\xbc\x45\xfe\xe1\x5e\xca\x5f\x84\x0c\x4f\x0e\xc5\x45\x21\x48\x65\xee\xee\xb6\x99\xd1\x53\x3a\xd5\x6f\xe0\xc7\xaa\x08\xf9\x2a\x41\xdb\x02\xec\x93\x11\x4f\x0f\x01\xa1\x4a\xd6\x96\x79\x6f\x91\x9a\xfe\x86\xcb\x4e\x32\x35\xd6\x5d\x6f\xdb\xa0\xc2\x45\xd8\x48\xf8\x24\xfc\xcb\x74\xc3\x1c\x70\x40\xc7\x5b\x4a\x58\xd7\x6d\x7c\x2a\xbb\x21\x70\x17\xc4\x0c\x77\x40\x8a\x43\xfd\x6c\x49\x9e\xae\x76\x2d\xaa\xb0\xde\x4e\x2b\x1b\xe9\x4e\x87\xda\xe1\x27\x47\xab\xaf\xc1\x4b\x4a\xe2\x22\x2d\x37\x37\xde\x43\xcb\x8d\xe8\x1c\x59\x4c\x6c\xb9\xa9\xdd\xb9\xf3\x4a\x79\xe9\x2b\x6f\x9e\xd9\x89\x45\xe8\xcb\x2b\xc8\xf8\x78\xa6\x4e\x4a\xc0\x54\x78\xa7\xf7\xe7\xe2\x01\xb4\xdc\x2c\xca\x6e\x36\x80\x27\x26\xe7\x99\x4a\x77\x58\xf0\xfc\x15\x10\xa0\x9e\xcc\x9a\xb7\xcc\xdc\x3b\xfa\xaa\xaa\x9d\xfe\xbd\xeb\xd0\x3c\x30\x8b\xb4\x1a\xb9\xae\x6d\xbf\xb3\xce\x08\xf5\x44\x7f\xa8\xae\xa5\xcc\xbe\x1e\xfc\xbd\xa0\x79\x9d\x6a\xa9\xa1\xe2\x5e\x94\xce\x61\x0d\x4c\xa2\x71\xd5\xff\x52\x83\x57\xff\xb7\xd5\xc3\x74\xc9\xbe\xb8\xac\xc5\x70\xb7\x66\x1b\x96\xbf\x25\x52\xb3\xfd\xbb\x20\x11\xda\x1b\x51\xfe\x80\xff\x17\x0d\x66\xda\x23\x0b\xed\x91\x19\x61\x0d\xf7\x1f\x7b\x46\x44\xd3\xbf\x51\xd9\xf8\x96\x5a\x6e\xc6\x4f\xc3\x7f\x02\x00\x00\xff\xff\x6f\x8a\xbe\x36\xb6\x0a\x00\x00")

func appMainJsBytes() ([]byte, error) {
	return bindataRead(
		_appMainJs,
		"app/main.js",
	)
}

func appMainJs() (*asset, error) {
	bytes, err := appMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/main.js", size: 2742, mode: os.FileMode(420), modTime: time.Unix(1626022383, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesHomeHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\x31\x0e\xc2\x30\x0c\x45\xf7\x9e\xc2\xca\x92\x09\xe5\x02\x4e\x66\x46\x36\x66\x53\xbb\xaa\x85\x69\xaa\xc6\x2d\xf4\xf6\x08\x2a\xc4\xf8\xff\x7b\x7a\x38\x0a\xb1\x2c\xd0\x1b\xb5\x96\x83\xab\x9b\x84\x72\xae\x0f\xc1\x74\xa0\xd2\x75\xc8\xba\x81\x72\x0e\xcf\xba\xdc\xdb\x4c\xbd\x9c\x74\x1a\x6a\x0b\xa5\x03\xc0\x41\xc5\xb8\x89\x7f\x06\x00\x1a\xdd\xc4\xca\xf5\x67\xc2\x85\x7c\xc4\x74\xbc\x87\xa1\xd3\xbc\x3a\xf8\x3e\x4b\x8e\x2e\x2f\x8f\xb0\x91\xad\x92\x63\x84\x45\x88\xeb\x64\xfb\x37\x9c\xfe\x65\x4c\xac\x5b\x79\x07\x00\x00\xff\xff\x31\xe1\x1b\xf9\xad\x00\x00\x00")

func appPagesHomeHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appPagesHomeHomeHtml,
		"app/pages/home/home.html",
	)
}

func appPagesHomeHomeHtml() (*asset, error) {
	bytes, err := appPagesHomeHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/home/home.html", size: 173, mode: os.FileMode(420), modTime: time.Unix(1625985883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesHomeHomeJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x8e\xd3\x30\x10\xbe\xe7\x29\x46\xcb\xc1\x89\xb4\x78\x1f\x20\xca\x4a\x68\x05\xea\x81\x3f\x09\x6e\x88\x83\x49\x26\x8a\xc1\x19\x07\x7b\xdc\x52\xd1\xbe\x3b\xb2\x9b\xa4\x6e\xa9\x7a\xcb\xf8\xfb\x99\xcf\xfe\xd2\x1a\xe5\x3d\x6c\xec\x88\xf0\xb7\x00\x68\x2d\x79\x76\xa1\x65\xeb\xca\x2a\x9d\x1c\x8b\x02\x40\x93\xe6\x79\x06\xe0\x41\x7b\xb9\xd5\xb8\x83\x06\x3a\xdb\x86\x11\x89\xe5\xef\x80\x6e\xff\x05\x0d\x26\xa9\x78\xb5\xb3\xee\x97\x9f\x54\x8b\xaf\x35\xf5\xd6\x8b\xaa\x3e\x6b\x57\x0c\x1a\x08\xd4\x61\xaf\x09\xbb\xfa\xd2\x5b\x6a\x22\x74\x9b\xaf\x1f\xde\x43\x03\x42\xd4\x45\x82\x7b\xe4\x76\x28\xc5\x93\x9a\xf4\xd3\xea\x22\xaa\x84\x01\x48\x1e\x90\x4a\x87\x1e\x9a\x67\x70\xe8\xe5\x4f\x6f\xa9\xac\x2e\xe1\x6c\xf9\xf3\x7c\xa1\x9b\xc1\xd6\xef\xfa\x92\xd3\x3a\x54\x8c\xef\x34\x9a\xae\x14\x1f\xd5\x88\xcb\xd5\x6e\x33\x3e\x2b\x1e\xee\x33\xde\x04\x1e\xac\x13\x8f\xe7\x8d\xf2\x74\x24\x49\x8d\xb8\x4a\x8f\xe9\x2b\xb5\x91\xcb\x23\xe7\x11\xb6\xca\x04\x5c\xfa\x49\x1d\x42\x1f\x61\x8f\x9c\x97\x74\x12\xbe\x35\x18\xa7\xf2\x61\xa1\x3c\xcc\x4b\x32\xb5\x51\x3f\xd0\xdc\x91\x26\x7c\xd1\xa5\x41\x32\xfe\xe1\x17\x4b\x8c\x14\x77\xc6\x5c\xff\xb9\x6a\x9a\xc2\xbd\x40\x09\x5f\x5c\xd3\x20\x79\x3f\xc5\x36\x44\x74\x17\x39\xe0\x50\x75\x9f\xc8\xec\xa1\x01\x76\x01\x73\x28\xbd\x06\x34\xa7\x57\x81\xc3\xe1\xaa\xdc\x6f\x31\xdb\xf7\x2c\xdc\xf2\x0e\x52\x4d\x13\x52\xf7\x32\x68\xd3\x95\xe9\x52\x73\x94\x9b\x84\xb4\xab\xba\xfe\x6d\x73\xc6\x22\x9b\x49\x0e\x39\x38\x5a\xcd\x52\x9d\x75\x71\xfc\x17\x00\x00\xff\xff\x62\xc2\x71\x9e\x82\x03\x00\x00")

func appPagesHomeHomeJsBytes() ([]byte, error) {
	return bindataRead(
		_appPagesHomeHomeJs,
		"app/pages/home/home.js",
	)
}

func appPagesHomeHomeJs() (*asset, error) {
	bytes, err := appPagesHomeHomeJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/home/home.js", size: 898, mode: os.FileMode(420), modTime: time.Unix(1625986690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesProjectsProjectsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x0e\x83\x20\x10\x45\xf7\x9c\x82\xb0\x37\x5c\x60\x9c\x4d\xf7\x8d\x49\xdb\x03\xa0\x4e\x22\x0d\x2d\x66\x98\x2e\xbc\x7d\x33\xc2\xc2\xe8\xee\xe5\xfd\x0f\x7c\x60\xa1\x30\x13\xdb\x29\x85\x52\x7a\x27\x51\x12\x39\x1c\x38\xbf\x69\x92\x02\xbe\xc6\x68\x0c\x48\x18\x13\xd9\x38\xf7\x6e\x6d\x69\x97\x62\x11\x87\xc6\x5a\x10\xed\x29\x29\x73\x85\x5d\xe3\x3d\x7c\x08\xbc\x2c\x47\xf7\xe2\x74\x56\x43\x90\xe5\xec\x9e\xdb\x7a\x39\xfa\xc8\x3f\x9e\xe8\x96\xbf\xc2\xf9\x70\x09\xf8\xfa\xaa\x9a\xb6\x04\x64\xcc\xf3\x76\x1d\xdc\xa9\x76\xad\xac\x8c\x06\xfc\xfe\x39\xfc\x07\x00\x00\xff\xff\x86\xab\x86\xd9\x0d\x01\x00\x00")

func appPagesProjectsProjectsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appPagesProjectsProjectsHtml,
		"app/pages/projects/projects.html",
	)
}

func appPagesProjectsProjectsHtml() (*asset, error) {
	bytes, err := appPagesProjectsProjectsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/projects/projects.html", size: 269, mode: os.FileMode(420), modTime: time.Unix(1625985346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesProjectsProjectsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x6e\xe2\x30\x10\xbe\xe7\x29\x46\xec\xc1\x89\xb4\x84\x07\x40\xd9\x0b\x5a\xa9\x87\xb6\x42\x82\x9e\x10\x87\xd4\x19\x14\x23\xe3\x49\xc7\x93\x52\x84\xf2\xee\x95\xad\xa4\xc4\x97\x9e\x3c\x99\xf9\x7e\xe6\x27\xda\xd6\xde\xc3\x96\xe9\x8c\x5a\x3c\xdc\x33\x00\x4d\xce\x0b\xf7\x5a\x88\xf3\x22\x66\x00\xa4\x35\xbe\xd4\x64\xfb\x8b\xf3\x50\xc1\x41\xbd\xd6\x17\x54\x7f\x41\xbd\xb1\x0d\xcf\xb6\x96\x36\xbc\xfb\x5b\x17\xd3\x3b\xea\x59\xe3\x86\x9c\x30\x59\x75\x5c\x67\x00\x43\x96\x01\x18\x67\x24\x15\xfd\x34\x78\x85\x0a\x1a\xd2\xfd\x05\x9d\x94\x1f\x3d\xf2\x6d\x87\x16\xa3\xbf\xfa\xd3\x8d\xad\x2d\xad\xf1\xb2\x7c\xa7\xe6\xa6\x8a\x75\x16\xf9\x27\x14\xdd\xe6\x8b\x55\xdd\x99\xd5\x04\x5b\x14\xb1\x04\x50\x4a\x8b\x2e\x67\xf4\x50\xfd\x03\x46\x5f\x9e\x3d\xb9\xbc\x48\xcb\x13\x2b\x60\xee\x63\x65\xd6\x57\x69\x9c\x43\x7e\xda\xbf\x3c\x43\x05\x4a\xad\x7f\x10\x27\x62\xc8\xe3\x9e\x60\x94\x00\x3a\x4d\xa1\x2f\x66\x5a\xe3\x3a\x81\x29\x99\x52\x33\xd6\x82\xff\x2d\x86\xaf\x5c\x09\x87\xa1\x1e\x9c\x99\xbe\x26\x1b\xb4\xe7\x07\x48\xf5\x27\x07\x8d\xd6\xfe\x66\xd1\xa4\x16\x10\x09\xa5\xe0\x97\x84\x33\xa1\x13\xa8\xa6\x09\x0e\x9a\xec\x31\x05\x33\x5d\xcb\xba\xeb\xd0\x35\x9b\xd6\xd8\x26\x0f\xe4\x44\x6f\x98\xc5\x8f\x05\xce\x29\x4c\xd7\x19\x63\xc2\x0f\x45\xfc\x37\x86\xef\x00\x00\x00\xff\xff\xdc\xb1\x2b\xa9\x89\x02\x00\x00")

func appPagesProjectsProjectsJsBytes() ([]byte, error) {
	return bindataRead(
		_appPagesProjectsProjectsJs,
		"app/pages/projects/projects.js",
	)
}

func appPagesProjectsProjectsJs() (*asset, error) {
	bytes, err := appPagesProjectsProjectsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/projects/projects.js", size: 649, mode: os.FileMode(420), modTime: time.Unix(1625984828, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesVersionsVersionsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\x0a\xc3\x30\x0c\x04\xef\x7e\x85\xd1\x3d\xf8\x03\x1b\x3d\xa1\xc7\xde\x9d\x5a\x10\x83\xdb\x80\x25\x0a\xfd\x7d\x51\x6c\x68\x21\xb7\x61\x76\xbd\x16\x76\xc9\x45\x7a\x7c\xb4\xac\xba\x92\x55\x6b\x42\x7c\x97\xae\xf5\x78\x29\xd2\x88\x39\x04\x58\xde\x9a\xc4\x5a\x56\x7a\xcf\x74\x69\x55\x8d\x38\xc4\x08\xf3\x9e\x93\x73\x1f\x70\x6a\xbe\xe5\xa7\x20\xd9\xfe\xef\xe6\xfc\x4f\x23\x8d\x47\x6e\xe6\x10\x6c\x3b\xca\xe7\xfa\xdf\xe2\x9a\x66\xd9\x99\x03\xd2\x79\x1b\x7f\x03\x00\x00\xff\xff\x2a\x1a\xed\xba\xcc\x00\x00\x00")

func appPagesVersionsVersionsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appPagesVersionsVersionsHtml,
		"app/pages/versions/versions.html",
	)
}

func appPagesVersionsVersionsHtml() (*asset, error) {
	bytes, err := appPagesVersionsVersionsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/versions/versions.html", size: 204, mode: os.FileMode(420), modTime: time.Unix(1625987436, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesVersionsVersionsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x31\x6f\xa3\x40\x10\x85\x7b\x7e\xc5\x93\xaf\x58\x90\xce\xf8\x07\x58\x5c\x63\x9d\x74\xc5\x25\x4d\xa2\x34\x96\x0b\xb2\x8c\xc5\x5a\xeb\x1d\x32\x3b\xd8\xb1\x2c\xfe\x7b\x04\x82\x18\x9a\x74\xb0\xf3\xbe\xf7\x76\x9e\xd6\xfa\x32\x46\xbc\x91\x44\xc7\x21\xe2\x9e\x00\x96\x43\x54\x69\xad\xb2\xa4\xd9\x70\x02\x68\xed\x62\x6e\xd9\xb7\xe7\x10\x51\x60\x6f\x9e\xcb\x33\x99\xdf\x30\x23\x69\x0e\x09\xd0\x25\x09\xe0\x82\xd3\x25\x76\x71\x74\x45\x81\x8a\x6d\x7b\xa6\xa0\xf9\x47\x4b\x72\x7b\x21\x4f\x43\x82\xf9\x75\x19\xc3\xd7\xde\x45\x5d\xbf\x73\x75\x33\xd9\x36\x19\xf8\x23\xa9\xad\xd3\xd5\xa6\x6c\xdc\x66\x92\xad\xb2\x61\x04\xe4\x5a\x53\x48\x85\x22\x8a\x3f\x10\x8a\xf9\x29\x72\x48\xb3\xe5\x78\xa2\x7a\xcd\x7d\x9c\xcc\xee\x95\xbb\x10\x48\xfe\xbd\x3e\xfd\x47\x01\x63\xb6\xdf\x8a\x23\x0b\xd2\xa1\x09\x34\xc2\x27\xb2\x0a\x3e\x62\x72\xcb\x66\x5e\x63\x61\x10\x5e\x6c\x69\x85\x4a\xa5\xbf\x9e\xfa\xbf\xd4\xa8\xf4\x4b\x3d\x98\x99\xbf\x65\xdf\x7b\xcf\x2b\x5e\xfa\x4f\x09\x96\xbc\xff\x29\xa2\x5a\x46\x60\x00\x72\xa5\x4f\xdd\x71\x50\x0a\x8a\x62\x5a\x66\x6f\xd9\x1f\x96\x62\xe1\x6b\x5e\x36\x0d\x85\x6a\x57\x3b\x5f\xa5\x3d\xbc\xf0\xeb\x66\xdf\x8f\x02\xe7\x88\xf0\x75\x46\x4c\xfa\x2e\x1b\xde\x46\xf7\x15\x00\x00\xff\xff\x74\xf8\xd8\x9a\x6b\x02\x00\x00")

func appPagesVersionsVersionsJsBytes() ([]byte, error) {
	return bindataRead(
		_appPagesVersionsVersionsJs,
		"app/pages/versions/versions.js",
	)
}

func appPagesVersionsVersionsJs() (*asset, error) {
	bytes, err := appPagesVersionsVersionsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/versions/versions.js", size: 619, mode: os.FileMode(420), modTime: time.Unix(1626021753, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x4e\xf4\x30\x0c\x84\xef\x7d\x0a\x4b\xbf\xfe\x1b\x41\x05\x71\x21\x7d\x9a\xa4\xf6\x36\x96\xb2\x76\x95\x7a\x9b\x16\xb4\xef\x8e\xb2\xdd\x95\x00\x71\x9c\xf1\xf8\xf3\xb8\xfb\xb7\x32\x55\xf8\xec\x00\x12\xf1\x94\xcc\xc3\x4b\xdf\xff\x1f\x3a\x80\xca\x68\xc9\xc3\x7b\xbf\xd6\x26\xcf\xa1\x4c\x2c\x1e\xc2\xc5\x74\xe8\xae\x5d\x17\x15\xf7\x27\x48\x76\xce\xbf\xd7\xd7\xf4\x6d\xbf\xe9\x1f\x80\xbe\x89\x39\x20\xb2\x4c\x77\xa5\x2b\x95\x53\xd6\xea\x21\x31\x22\xc9\x8d\xff\x3c\xaa\x58\x60\xa1\x72\xe3\x23\x2f\x73\x0e\xbb\x87\x53\xa6\x2d\xea\x76\xcf\x84\x82\xb7\x71\x73\x1d\x72\xa1\xd1\x58\xc5\x43\xd1\x7a\x24\x8c\x2d\xd3\x11\x51\x31\xb7\xf0\x07\x79\x78\x7d\x9b\xb7\xe1\x61\xd5\x7b\xf3\xa8\x19\x9b\x69\xb4\x99\x43\x1a\xb5\x84\x83\x75\x11\xa4\x92\x59\xa8\x4d\xa3\x6e\x2e\x64\x9e\xc4\xc3\x48\x62\x54\x8e\x33\xf1\x62\xa6\xe2\x62\xf8\xa3\xed\xf0\xe8\x77\xfc\x58\xb4\x42\x2d\x61\x6e\x76\xe6\xc5\xdc\x62\x7b\x26\x67\xfb\x4c\x1e\x44\xdb\x99\xeb\x57\x00\x00\x00\xff\xff\x0a\xe2\x4e\xdb\x98\x01\x00\x00")

func appStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_appStyleCss,
		"app/style.css",
	)
}

func appStyleCss() (*asset, error) {
	bytes, err := appStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/style.css", size: 408, mode: os.FileMode(420), modTime: time.Unix(1626021576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xb1\x4e\xc4\x30\x0c\x86\x77\x9e\xc2\x78\x39\x18\xee\xfc\x00\x24\x95\x10\x30\xc3\xc0\xc2\x98\x36\x46\xcd\x91\xe6\xa2\xd8\x6d\xe9\xdb\xa3\x36\x45\x30\xde\x14\xc7\xfe\xbf\x3f\x7f\x6c\x6e\x9f\x5f\x9f\xde\x3f\xde\x5e\xa0\xd7\x21\x36\x37\xa6\x1e\x00\xa6\x67\xe7\xd7\x02\xc0\xc4\x90\xbe\xa0\x70\xb4\x28\xba\x44\x96\x9e\x59\x11\xfa\xc2\x9f\x16\xc9\xe5\x4c\x5b\xfb\xd4\x89\x20\xd0\x06\xd3\x2f\x6d\xda\x8b\x5f\x76\x9b\x31\x42\xf0\x16\x07\x17\xd2\x71\xe0\x34\x22\x74\xd1\x89\xd8\x43\x3b\xaa\x5e\xd2\xb1\x75\xe5\xb0\x4b\x69\x8c\xb5\xaa\x57\x1f\xa6\x0d\x9d\x02\xcf\xd8\x18\xf2\x61\xfa\x3f\x96\xae\x84\xac\xa0\x4b\x66\x8b\xca\xdf\x4a\x67\x37\xb9\xda\x45\x90\xd2\xed\x31\xd7\x97\x4f\x67\x59\x1d\xea\xb0\xb9\x82\xaf\x1a\x00\x97\x33\x58\x48\x3c\xc3\x63\xce\x77\xf7\x0f\x7b\xd0\x3f\x23\x43\xf5\xaf\x86\xb6\x1d\xfe\x04\x00\x00\xff\xff\x00\xe7\xda\x5a\x5a\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 346, mode: os.FileMode(420), modTime: time.Unix(1626021840, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app/main.js":                      appMainJs,
	"app/pages/home/home.html":         appPagesHomeHomeHtml,
	"app/pages/home/home.js":           appPagesHomeHomeJs,
	"app/pages/projects/projects.html": appPagesProjectsProjectsHtml,
	"app/pages/projects/projects.js":   appPagesProjectsProjectsJs,
	"app/pages/versions/versions.html": appPagesVersionsVersionsHtml,
	"app/pages/versions/versions.js":   appPagesVersionsVersionsJs,
	"app/style.css":                    appStyleCss,
	"index.html":                       indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"app": &bintree{nil, map[string]*bintree{
		"main.js": &bintree{appMainJs, map[string]*bintree{}},
		"pages": &bintree{nil, map[string]*bintree{
			"home": &bintree{nil, map[string]*bintree{
				"home.html": &bintree{appPagesHomeHomeHtml, map[string]*bintree{}},
				"home.js":   &bintree{appPagesHomeHomeJs, map[string]*bintree{}},
			}},
			"projects": &bintree{nil, map[string]*bintree{
				"projects.html": &bintree{appPagesProjectsProjectsHtml, map[string]*bintree{}},
				"projects.js":   &bintree{appPagesProjectsProjectsJs, map[string]*bintree{}},
			}},
			"versions": &bintree{nil, map[string]*bintree{
				"versions.html": &bintree{appPagesVersionsVersionsHtml, map[string]*bintree{}},
				"versions.js":   &bintree{appPagesVersionsVersionsJs, map[string]*bintree{}},
			}},
		}},
		"style.css": &bintree{appStyleCss, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
