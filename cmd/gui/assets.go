// Code generated for package gui by go-bindata DO NOT EDIT. (@generated)
// sources:
// cmd/gui/web-app/index.html
// cmd/gui/web-app/app/main.js
// cmd/gui/web-app/app/pages/home.html
// cmd/gui/web-app/app/pages/home.js
// cmd/gui/web-app/app/pages/projects.html
// cmd/gui/web-app/app/pages/projects.js
// cmd/gui/web-app/app/style.css
package gui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x4f\xfb\x30\x10\xc5\xf7\xff\xa7\xb8\x7a\xe9\x9f\x21\xb1\x3a\x63\x47\x42\xc0\x0a\x1d\x58\x18\x8d\x7d\x95\x1d\x12\xc7\xf2\x59\x29\x51\xd5\xef\x8e\x12\x3b\x34\x6c\x4c\x39\xdd\xbb\xdf\xcb\xf3\x9d\xd8\x3d\xbd\x3e\xbe\xbd\x1f\x9f\xc1\xa6\xbe\x6b\xfe\x89\xfc\x01\x10\x16\x95\x99\x0b\x00\xd1\x39\xff\x09\x11\x3b\xc9\x28\x4d\x1d\x92\x45\x4c\x0c\x6c\xc4\x93\x64\x5c\x85\xc0\x97\x76\xad\x89\x18\xf0\x05\xe6\x2b\x2d\x3e\x06\x33\x15\x1b\xe3\x46\x70\x46\xb2\xd1\xe1\x99\x35\x82\x1b\x37\x66\x25\xcb\xbb\xaa\x2a\x95\x3d\x34\xc7\x38\xb4\xa8\x13\x09\x6e\x0f\x1b\x5c\x77\x8a\x48\x32\x3d\xf8\xa4\x9c\xc7\xc8\xb2\x06\x70\xb9\x9c\x86\x08\x21\x53\xe0\xfc\x5a\xd2\xf5\x5a\x26\x7e\x39\xec\xb5\x8a\x66\xdf\xfc\x48\xb3\x41\x21\xea\x17\xd5\xe3\x96\xba\xe5\x9c\xa7\xd0\x9b\xcd\x9f\x56\xfb\x3c\x04\x55\xb5\x7d\x10\xe9\xe8\x42\x82\x34\x05\x94\x2c\xe1\x57\xe2\xad\x1a\x55\xee\x32\xa0\xa8\xcb\xf6\x7a\xe5\x7c\xdd\xd2\xbc\x92\x2c\x36\x7f\xe0\xd7\x44\x2a\x04\x90\xe0\xf1\x0c\x0f\x21\xfc\xbf\xbb\x2f\x71\x6e\x46\x82\xe7\x13\x08\xbe\x9c\xf6\x3b\x00\x00\xff\xff\x23\xe2\xe7\x6b\xf1\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 497, mode: os.FileMode(420), modTime: time.Unix(1625984290, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x4c\xb2\x07\x52\xb0\x21\x67\xf7\x2a\x68\x81\xc0\xd8\x45\x0f\x2d\x10\x20\xed\xa9\xe8\x81\xa1\xc6\x16\x53\x9a\x62\x49\xca\x89\x51\xe8\xbf\x17\xa4\x44\x7d\xd9\xf9\xe8\xa1\x39\xc4\x10\xe7\xcd\x9b\x99\x37\x4f\x14\x97\xcc\x5a\xb8\x63\x7b\x84\x9f\x09\x00\xaf\x95\x75\xa6\xe1\xae\x36\x54\xb1\x03\xae\xa1\x72\x07\xb9\x86\x1d\xf3\x47\xa7\x34\x80\x00\x5c\x25\x6c\xe6\xe3\x50\x80\xff\x19\x0f\x3d\x1c\x8a\x90\x35\x1e\xf6\xd9\x50\x44\x9e\x31\x24\x94\x75\x4c\x71\x4f\xd4\xa8\x12\x77\x42\x61\x99\x27\x00\x6d\xd2\x26\x49\xd7\xdc\xad\xd6\x67\xbd\xcd\x1a\x39\x0a\x7c\x82\x02\xca\x9a\x37\x07\x54\x2e\xfb\xd1\xa0\x39\xdd\xa3\xc4\x00\x25\x7f\xf9\x38\x49\x47\x3c\x6f\x8c\x41\xe5\xc2\xd0\x05\xa8\x46\xca\x7c\x12\x64\xbc\xc2\xd2\xc7\x2c\x14\xf0\xf5\x5b\x9e\x4c\x27\x3e\x8a\x3d\x73\x48\x49\x55\x1f\x90\xa4\x5d\xa3\x09\x80\xb0\x3e\x61\x1b\x52\x83\x6e\xb1\x3f\x83\xae\x31\x0a\xae\xae\x42\xfe\x1e\xdd\x76\xa0\xef\x70\x91\xe1\x42\xa8\xa7\xd8\xd5\x06\x68\x98\x1d\xb4\xef\xb8\xde\x9d\x35\x1a\xa1\x00\x62\x07\xd4\xa3\xfa\xe5\x14\xdd\x7a\xc6\xf8\xd0\x91\x07\xe5\xfd\x61\x9b\xc4\xff\xa1\x95\x61\xca\x69\xea\x20\x74\x26\x94\x42\xf3\xe1\xf3\xa7\x8f\x50\x00\x21\x1d\x87\x2f\xdb\xad\xf3\x4c\x88\xb1\xf6\x64\x86\x02\x5e\xd2\x23\xf6\x74\xb9\x5e\x18\x6d\xf0\x16\x74\xcf\xd1\x42\x99\x50\xc2\xd1\x9e\xa1\x05\x94\x16\x87\xda\xfd\xd4\x0a\x9f\xe0\xce\xd4\x07\x61\x91\x52\x83\xb6\x96\x47\x5c\x83\xc1\x47\xe4\x2e\x85\xe2\xdf\x89\x4e\x12\x1d\xf0\xba\x51\x0e\x0d\x14\x70\x93\x0f\x81\xd9\x18\x81\x30\x36\xbf\x06\x42\xd2\x25\x90\x57\xc8\xbf\xdf\x4a\xf9\xbf\x90\xc1\x51\x14\x17\x85\x20\x96\x59\xad\xf2\xc9\xa1\x97\x74\xa8\x5f\xc0\x3f\xe9\x2c\xe5\x4d\x81\xf2\x19\xd8\x93\x11\x2f\x0f\x01\xa1\xe6\xaa\x2d\x79\x5f\x13\x35\xfe\xb5\xe7\x9d\x4c\xdc\x98\xe9\xc6\x56\xc1\x85\x8b\xb4\x5e\xf0\xc1\xf8\xe7\x74\xed\x98\xb0\x43\xc7\x2b\x4a\x98\xd6\x1b\x4f\x65\x37\x04\x56\xc1\xcc\xb0\x02\x92\x3d\x5a\x32\x65\xc8\x5c\x85\x2a\x6c\x54\xd7\xca\x76\x0a\xc7\x87\xcc\xe1\xb3\xa3\xe9\x5b\xf0\xb9\x0a\xdd\xee\x2c\x37\xd3\x7b\x85\x1b\x64\x0e\xff\x93\xe8\x9f\x28\xb1\xdc\x08\xed\xc8\x62\x48\xcb\x4d\xe6\x4e\xda\x9b\xe3\xda\x57\xde\x3c\xb2\x23\xeb\xa0\xd7\x17\x90\xf8\xec\xa0\x18\x7a\x9d\x03\x86\xc2\x0f\x75\x79\xca\x98\xd6\xa8\xca\x6d\x25\x64\x49\x2d\x37\x8b\xb2\x9b\x0d\xe0\x91\xc9\x71\xa6\x79\x38\xec\x74\xbc\x86\x03\xd4\x8b\x99\xf1\x8a\x99\x5b\x47\x6f\xd2\xcc\xd5\x5f\xb4\x46\xb3\x65\x16\x69\xda\x6b\x9d\xd9\xe6\xc1\x3a\x23\xd4\x9e\xfe\x9d\x5e\xa2\x9c\x5c\xdf\xfe\x55\xa0\xd3\x3a\xe9\xd2\x36\xb3\x57\x61\x1e\x6c\xd7\xc0\x24\x1a\x97\xbe\xd7\x00\xde\xe3\x7f\xd6\x02\xc3\xab\xf4\xe2\x7e\x16\xf3\xbc\x36\x4e\x1b\xaf\xa5\x78\xc9\xca\x9a\x95\xf7\xc1\x15\xb4\x31\x22\xbe\x84\xbf\x6f\xbb\x89\xdd\xc8\xc2\x6e\x64\x44\x58\xc3\xfd\x07\xd6\x88\xee\xe8\x3d\xc6\xea\x6f\x4c\xcb\x4d\xff\x39\xfe\x15\x00\x00\xff\xff\xfe\xa5\xf1\xf9\x2a\x08\x00\x00")

func appMainJsBytes() ([]byte, error) {
	return bindataRead(
		_appMainJs,
		"app/main.js",
	)
}

func appMainJs() (*asset, error) {
	bytes, err := appMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/main.js", size: 2090, mode: os.FileMode(420), modTime: time.Unix(1625984317, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x30\xb6\xf3\xc8\xcf\x4d\xb5\xd1\xcf\x30\xb6\xe3\xb2\x49\x2a\x2d\x29\xc9\xcf\x53\xc8\xcf\x4b\xce\xc9\x4c\xce\xb6\x55\x4a\x2c\x28\xd0\xcb\x4b\x2c\xcb\x4c\x4f\x2c\x49\xd5\x50\x2f\x28\xca\xcf\x4a\x4d\x2e\x29\x56\xd7\x54\xb2\xb3\x53\x80\xf1\x6c\xf4\x21\xba\xec\x00\x01\x00\x00\xff\xff\xe8\x89\xe9\xdc\x4c\x00\x00\x00")

func appPagesHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appPagesHomeHtml,
		"app/pages/home.html",
	)
}

func appPagesHomeHtml() (*asset, error) {
	bytes, err := appPagesHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/home.html", size: 76, mode: os.FileMode(420), modTime: time.Unix(1625984300, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesHomeJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xce\x49\x2c\x2e\x56\xf0\xc8\xcf\x4d\x55\xa8\xe6\x52\x50\x48\xce\xcf\x2b\x2e\x29\x2a\x4d\x2e\xc9\x2f\xd2\xd0\x04\x8b\xd4\x72\x71\x29\x28\x64\xe6\x65\x96\xc0\xf9\xb5\x80\x00\x00\x00\xff\xff\x45\x65\x14\x04\x34\x00\x00\x00")

func appPagesHomeJsBytes() ([]byte, error) {
	return bindataRead(
		_appPagesHomeJs,
		"app/pages/home.js",
	)
}

func appPagesHomeJs() (*asset, error) {
	bytes, err := appPagesHomeJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/home.js", size: 52, mode: os.FileMode(420), modTime: time.Unix(1625984251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesProjectsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x3d\x0e\x83\x30\x0c\x46\xf7\x9c\x22\xca\x8e\x32\xb0\xba\x5e\xba\x57\x48\x6d\x0f\x10\x48\xa4\x50\xa5\x35\x32\xee\xc0\xed\x91\x21\x03\x82\xed\xe9\xf9\xef\x33\xe4\x16\x3b\xa6\x4f\x1a\x64\x06\x9f\x5b\x34\x06\x24\xf4\x25\xd9\x31\xde\xdc\x54\x2b\x4d\x19\x67\x71\x68\xac\x05\xc9\x29\x44\x25\x65\xde\x61\xd3\xf8\x08\xdf\x04\x5e\xf2\xd1\xbd\xb9\x9c\x55\x17\x24\x9f\xdd\x6b\x99\x2e\xa3\x4f\xfa\xf3\x90\xee\xf4\x13\xa6\xc3\x12\xf0\xfb\x55\x35\x35\x09\x48\x4f\x71\xb9\x06\x6e\x54\xbb\xda\xac\x8c\x06\xfc\xf6\x1c\xae\x01\x00\x00\xff\xff\x47\xcc\x3d\x1b\xf7\x00\x00\x00")

func appPagesProjectsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appPagesProjectsHtml,
		"app/pages/projects.html",
	)
}

func appPagesProjectsHtml() (*asset, error) {
	bytes, err := appPagesProjectsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/projects.html", size: 247, mode: os.FileMode(420), modTime: time.Unix(1625983913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesProjectsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x6e\xe2\x30\x10\xbe\xe7\x29\x46\xec\xc1\x89\xb4\x84\x07\x40\xd9\x0b\x5a\xa9\x87\xb6\x42\x82\x9e\x10\x87\xd4\x19\x14\x23\xe3\x49\xc7\x93\x52\x84\xf2\xee\x95\xad\xa4\xc4\x97\x9e\x3c\x99\xf9\x7e\xe6\x27\xda\xd6\xde\xc3\x96\xe9\x8c\x5a\x3c\xdc\x33\x00\x4d\xce\x0b\xf7\x5a\x88\xf3\x22\x66\x00\xa4\x35\xbe\xd4\x64\xfb\x8b\xf3\x50\xc1\x41\xbd\xd6\x17\x54\x7f\x41\xbd\xb1\x0d\xcf\xb6\x96\x36\xbc\xfb\x5b\x17\xd3\x3b\xea\x59\xe3\x86\x9c\x30\x59\x75\x5c\x67\x00\x43\x96\x01\x18\x67\x24\x15\xfd\x34\x78\x85\x0a\x1a\xd2\xfd\x05\x9d\x94\x1f\x3d\xf2\x6d\x87\x16\xa3\xbf\xfa\xd3\x8d\xad\x2d\xad\xf1\xb2\x7c\xa7\xe6\xa6\x8a\x75\x16\xf9\x27\x14\xdd\xe6\x8b\x55\xdd\x99\xd5\x04\x5b\x14\xb1\x04\x50\x4a\x8b\x2e\x67\xf4\x50\xfd\x03\x46\x5f\x9e\x3d\xb9\xbc\x48\xcb\x13\x2b\x60\xee\x63\x65\xd6\x57\x69\x9c\x43\x7e\xda\xbf\x3c\x43\x05\x4a\xad\x7f\x10\x27\x62\xc8\xe3\x9e\x60\x94\x00\x3a\x4d\xa1\x2f\x66\x5a\xe3\x3a\x81\x29\x99\x52\x33\xd6\x82\xff\x2d\x86\xaf\x5c\x09\x87\xa1\x1e\x9c\x99\xbe\x26\x1b\xb4\xe7\x07\x48\xf5\x27\x07\x8d\xd6\xfe\x66\xd1\xa4\x16\x10\x09\xa5\xe0\x97\x84\x33\xa1\x13\xa8\xa6\x09\x0e\x9a\xec\x31\x05\x33\x5d\xcb\xba\xeb\xd0\x35\x9b\xd6\xd8\x26\x0f\xe4\x44\x6f\x98\xc5\x8f\x05\xce\x29\x4c\xd7\x19\x63\xc2\x0f\x45\xfc\x37\x86\xef\x00\x00\x00\xff\xff\xdc\xb1\x2b\xa9\x89\x02\x00\x00")

func appPagesProjectsJsBytes() ([]byte, error) {
	return bindataRead(
		_appPagesProjectsJs,
		"app/pages/projects.js",
	)
}

func appPagesProjectsJs() (*asset, error) {
	bytes, err := appPagesProjectsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/projects.js", size: 649, mode: os.FileMode(420), modTime: time.Unix(1625984206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x4b\xce\xcf\x2b\x49\xcc\xcc\x4b\x2d\x52\xa8\xe6\x52\x50\x48\xc9\x2c\x2e\xc8\x49\xac\xb4\x52\x48\xcb\x49\xad\x48\xca\xaf\xb0\xe6\xaa\xe5\xe2\xd2\x4b\x4e\x2c\x4a\x01\x4b\x83\x44\x75\x53\x32\x8b\x52\x93\x4b\x32\xf3\xf3\xac\x14\x8a\xf2\xcb\xad\xb9\x6a\x01\x01\x00\x00\xff\xff\x71\x37\x25\xec\x44\x00\x00\x00")

func appStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_appStyleCss,
		"app/style.css",
	)
}

func appStyleCss() (*asset, error) {
	bytes, err := appStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/style.css", size: 68, mode: os.FileMode(420), modTime: time.Unix(1625975429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html":              indexHtml,
	"app/main.js":             appMainJs,
	"app/pages/home.html":     appPagesHomeHtml,
	"app/pages/home.js":       appPagesHomeJs,
	"app/pages/projects.html": appPagesProjectsHtml,
	"app/pages/projects.js":   appPagesProjectsJs,
	"app/style.css":           appStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"app": &bintree{nil, map[string]*bintree{
		"main.js": &bintree{appMainJs, map[string]*bintree{}},
		"pages": &bintree{nil, map[string]*bintree{
			"home.html":     &bintree{appPagesHomeHtml, map[string]*bintree{}},
			"home.js":       &bintree{appPagesHomeJs, map[string]*bintree{}},
			"projects.html": &bintree{appPagesProjectsHtml, map[string]*bintree{}},
			"projects.js":   &bintree{appPagesProjectsJs, map[string]*bintree{}},
		}},
		"style.css": &bintree{appStyleCss, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
