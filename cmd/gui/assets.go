// Code generated for package gui by go-bindata DO NOT EDIT. (@generated)
// sources:
// cmd/gui/web-app/app/main.js
// cmd/gui/web-app/app/pages/home/home.html
// cmd/gui/web-app/app/pages/home/home.js
// cmd/gui/web-app/app/pages/projects/projects.html
// cmd/gui/web-app/app/pages/projects/projects.js
// cmd/gui/web-app/app/pages/versions/versions.html
// cmd/gui/web-app/app/pages/versions/versions.js
// cmd/gui/web-app/app/style.css
// cmd/gui/web-app/index.html
package gui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _appMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x4c\xb2\x07\x52\xb0\x21\x67\xf7\x2a\x68\x81\xc0\xd8\x45\x0f\x2d\x10\x20\xed\xa9\xe8\x81\xa1\xc6\x16\x53\x9a\x62\x49\xca\x89\x51\xe8\xbf\x17\xa4\x44\x7d\xd9\x49\xda\x02\xcd\x21\x06\x39\x6f\xde\xcc\x3c\x3e\x52\x5c\x32\x6b\xe1\x8e\xed\x11\xbe\x27\x00\xbc\x56\xd6\x99\x86\xbb\xda\x50\xc5\x0e\xb8\x86\xca\x1d\xe4\x1a\x76\xcc\x6f\x9d\xd2\x00\x02\x70\x95\xb0\x99\x8f\x43\x01\xfe\x67\xdc\xf4\x70\x28\x42\xd6\xb8\xd9\x67\x43\x11\x79\xc6\x90\x50\xd6\x31\xc5\x3d\x51\xa3\x4a\xdc\x09\x85\x65\x9e\x00\xb4\x49\x9b\x24\x5d\x73\xb7\x5a\x9f\xf5\x36\x6b\xe4\x28\xf0\x09\x0a\x28\x6b\xde\x1c\x50\xb9\xec\x5b\x83\xe6\x74\x8f\x12\x03\x94\xfc\xe5\xe3\x24\x1d\xf1\xbc\x31\x06\x95\x0b\x43\x17\xa0\x1a\x29\xf3\x49\x90\xf1\x0a\x4b\x1f\xb3\x50\xc0\xe7\x2f\x79\x32\x9d\xf8\x28\xf6\xcc\x21\x25\x55\x7d\x40\x92\x76\x8d\x26\x00\xc2\xfa\x84\x6d\x48\x0d\xba\xc5\xfe\x0c\xba\xc6\x28\xb8\xba\x0a\xf9\x7b\x74\xdb\x81\xbe\xc3\x45\x86\x0b\xa1\x9e\x62\x57\x1b\xa0\x61\x76\xd0\xbe\xe3\x7a\x77\xd6\x68\x84\x02\x88\x1d\x50\x8f\xea\x0f\xa7\xe8\x8e\x67\x8c\x0f\x1d\x79\x50\xde\x6f\xb6\x49\xfc\x1f\x5a\x19\xa6\x9c\xa6\x0e\x42\x67\x42\x29\x34\xef\x3e\x7e\x78\x0f\x05\x10\xd2\x71\xf8\xb2\xdd\x71\x9e\x09\x31\xd6\x9e\xcc\x50\xc0\x4b\x7a\xc4\x9e\x2e\xd7\x0b\xa3\x0d\xde\x82\x6e\x1d\x2d\x94\x09\x25\x1c\xed\x19\x5a\x40\x69\x71\xa8\xdd\x4f\xad\xf0\x09\xee\x4c\x7d\x10\x16\x29\x35\x68\x6b\x79\xc4\x35\x18\x7c\x44\xee\x52\x28\xfe\x9d\xe8\x24\xd1\x01\xaf\x1b\xe5\xd0\x40\x01\x37\xf9\x10\x98\x8d\x11\x08\x63\xf3\x6b\x20\x24\x5d\x02\x79\x85\xfc\xeb\xad\x94\xff\x0b\x19\x1c\x45\x71\x51\x08\x62\x99\xd5\x2a\x9f\x6c\x7a\x49\x87\xfa\x05\xfc\x93\xce\x52\xde\x14\x28\x9f\x81\x3d\x19\xf1\xf2\x10\x10\x6a\xae\xda\x92\xf7\x35\x51\xe3\x5f\x7b\xde\xc9\xc4\x8d\x99\x6e\x6c\x15\x5c\xb8\x48\xeb\x05\x1f\x8c\x7f\x4e\xd7\x8e\x09\x3b\x74\xbc\xa2\x84\x69\xbd\xf1\x54\x76\x43\x60\x15\xcc\x0c\x2b\x20\xb3\x45\xf6\x68\xc9\x94\x2e\x73\x15\xaa\x70\xbc\xba\x56\xb6\x93\x3b\x2e\x32\x87\xcf\x8e\xa6\x6f\xc1\xe7\x92\x74\x07\x69\xb9\x99\x3e\x32\xdc\x20\x73\xf8\x9f\x44\xbf\xa2\xc4\x72\x23\xb4\x23\x8b\x89\x2d\x37\x99\x3b\x69\xef\x94\x6b\x5f\x79\xf3\xc8\x8e\xac\x83\x5e\x5f\x40\xe2\xb3\x83\x62\xe8\x75\x0e\x18\x0a\x3f\xd4\xe5\x29\x63\x5a\xa3\x2a\xb7\x95\x90\x25\xb5\xdc\x2c\xca\x6e\x36\x80\x47\x26\xc7\x99\xe6\xe1\x70\xc0\xe3\x9b\x1c\xa0\x5e\xcc\x8c\x57\xcc\xdc\x3a\x7a\x93\x66\xae\xfe\xa4\x35\x9a\x2d\xb3\x48\xd3\x5e\xeb\xcc\x36\x0f\xd6\x19\xa1\xf6\xf4\xef\xf4\x12\xe5\xe4\x2d\xf7\xf7\x82\x4e\xeb\xa4\x4b\x0f\xcd\xee\xc5\x3c\xd8\xae\x81\x49\x34\x2e\xfd\x2d\x37\x78\xf7\xff\x59\x3f\x0c\x97\xec\xc5\xc3\x5a\x0c\xf7\xda\x6c\x6d\x7c\xb0\xe2\xf3\x2b\x6b\x56\xde\x07\x8b\xd0\xc6\x88\x78\x3d\x7f\xdd\x83\x13\xef\x91\x85\xf7\xc8\x88\xb0\x86\xfb\x4f\xaf\x11\xdd\xd6\xcf\xb8\xac\x7f\x4b\x2d\x37\xfd\x87\xfa\x47\x00\x00\x00\xff\xff\x9b\xb7\x9f\x54\x44\x08\x00\x00")

func appMainJsBytes() ([]byte, error) {
	return bindataRead(
		_appMainJs,
		"app/main.js",
	)
}

func appMainJs() (*asset, error) {
	bytes, err := appMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/main.js", size: 2116, mode: os.FileMode(420), modTime: time.Unix(1625984938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesHomeHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\x31\x0e\xc2\x30\x0c\x45\xf7\x9e\xc2\xca\x92\x09\xe5\x02\x4e\x66\x46\x36\x66\x53\xbb\xaa\x85\x69\xaa\xc6\x2d\xf4\xf6\x08\x2a\xc4\xf8\xff\x7b\x7a\x38\x0a\xb1\x2c\xd0\x1b\xb5\x96\x83\xab\x9b\x84\x72\xae\x0f\xc1\x74\xa0\xd2\x75\xc8\xba\x81\x72\x0e\xcf\xba\xdc\xdb\x4c\xbd\x9c\x74\x1a\x6a\x0b\xa5\x03\xc0\x41\xc5\xb8\x89\x7f\x06\x00\x1a\xdd\xc4\xca\xf5\x67\xc2\x85\x7c\xc4\x74\xbc\x87\xa1\xd3\xbc\x3a\xf8\x3e\x4b\x8e\x2e\x2f\x8f\xb0\x91\xad\x92\x63\x84\x45\x88\xeb\x64\xfb\x37\x9c\xfe\x65\x4c\xac\x5b\x79\x07\x00\x00\xff\xff\x31\xe1\x1b\xf9\xad\x00\x00\x00")

func appPagesHomeHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appPagesHomeHomeHtml,
		"app/pages/home/home.html",
	)
}

func appPagesHomeHomeHtml() (*asset, error) {
	bytes, err := appPagesHomeHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/home/home.html", size: 173, mode: os.FileMode(420), modTime: time.Unix(1625985883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesHomeHomeJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x8e\xd3\x30\x10\xbe\xe7\x29\x46\xcb\xc1\x89\xb4\x78\x1f\x20\xca\x4a\x68\x05\xea\x81\x3f\x09\x6e\x88\x83\x49\x26\x8a\xc1\x19\x07\x7b\xdc\x52\xd1\xbe\x3b\xb2\x9b\xa4\x6e\xa9\x7a\xcb\xf8\xfb\x99\xcf\xfe\xd2\x1a\xe5\x3d\x6c\xec\x88\xf0\xb7\x00\x68\x2d\x79\x76\xa1\x65\xeb\xca\x2a\x9d\x1c\x8b\x02\x40\x93\xe6\x79\x06\xe0\x41\x7b\xb9\xd5\xb8\x83\x06\x3a\xdb\x86\x11\x89\xe5\xef\x80\x6e\xff\x05\x0d\x26\xa9\x78\xb5\xb3\xee\x97\x9f\x54\x8b\xaf\x35\xf5\xd6\x8b\xaa\x3e\x6b\x57\x0c\x1a\x08\xd4\x61\xaf\x09\xbb\xfa\xd2\x5b\x6a\x22\x74\x9b\xaf\x1f\xde\x43\x03\x42\xd4\x45\x82\x7b\xe4\x76\x28\xc5\x93\x9a\xf4\xd3\xea\x22\xaa\x84\x01\x48\x1e\x90\x4a\x87\x1e\x9a\x67\x70\xe8\xe5\x4f\x6f\xa9\xac\x2e\xe1\x6c\xf9\xf3\x7c\xa1\x9b\xc1\xd6\xef\xfa\x92\xd3\x3a\x54\x8c\xef\x34\x9a\xae\x14\x1f\xd5\x88\xcb\xd5\x6e\x33\x3e\x2b\x1e\xee\x33\xde\x04\x1e\xac\x13\x8f\xe7\x8d\xf2\x74\x24\x49\x8d\xb8\x4a\x8f\xe9\x2b\xb5\x91\xcb\x23\xe7\x11\xb6\xca\x04\x5c\xfa\x49\x1d\x42\x1f\x61\x8f\x9c\x97\x74\x12\xbe\x35\x18\xa7\xf2\x61\xa1\x3c\xcc\x4b\x32\xb5\x51\x3f\xd0\xdc\x91\x26\x7c\xd1\xa5\x41\x32\xfe\xe1\x17\x4b\x8c\x14\x77\xc6\x5c\xff\xb9\x6a\x9a\xc2\xbd\x40\x09\x5f\x5c\xd3\x20\x79\x3f\xc5\x36\x44\x74\x17\x39\xe0\x50\x75\x9f\xc8\xec\xa1\x01\x76\x01\x73\x28\xbd\x06\x34\xa7\x57\x81\xc3\xe1\xaa\xdc\x6f\x31\xdb\xf7\x2c\xdc\xf2\x0e\x52\x4d\x13\x52\xf7\x32\x68\xd3\x95\xe9\x52\x73\x94\x9b\x84\xb4\xab\xba\xfe\x6d\x73\xc6\x22\x9b\x49\x0e\x39\x38\x5a\xcd\x52\x9d\x75\x71\xfc\x17\x00\x00\xff\xff\x62\xc2\x71\x9e\x82\x03\x00\x00")

func appPagesHomeHomeJsBytes() ([]byte, error) {
	return bindataRead(
		_appPagesHomeHomeJs,
		"app/pages/home/home.js",
	)
}

func appPagesHomeHomeJs() (*asset, error) {
	bytes, err := appPagesHomeHomeJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/home/home.js", size: 898, mode: os.FileMode(420), modTime: time.Unix(1625986690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesProjectsProjectsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x0e\x83\x20\x10\x45\xf7\x9c\x82\xb0\x37\x5c\x60\x9c\x4d\xf7\x8d\x49\xdb\x03\xa0\x4e\x22\x0d\x2d\x66\x98\x2e\xbc\x7d\x33\xc2\xc2\xe8\xee\xe5\xfd\x0f\x7c\x60\xa1\x30\x13\xdb\x29\x85\x52\x7a\x27\x51\x12\x39\x1c\x38\xbf\x69\x92\x02\xbe\xc6\x68\x0c\x48\x18\x13\xd9\x38\xf7\x6e\x6d\x69\x97\x62\x11\x87\xc6\x5a\x10\xed\x29\x29\x73\x85\x5d\xe3\x3d\x7c\x08\xbc\x2c\x47\xf7\xe2\x74\x56\x43\x90\xe5\xec\x9e\xdb\x7a\x39\xfa\xc8\x3f\x9e\xe8\x96\xbf\xc2\xf9\x70\x09\xf8\xfa\xaa\x9a\xb6\x04\x64\xcc\xf3\x76\x1d\xdc\xa9\x76\xad\xac\x8c\x06\xfc\xfe\x39\xfc\x07\x00\x00\xff\xff\x86\xab\x86\xd9\x0d\x01\x00\x00")

func appPagesProjectsProjectsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appPagesProjectsProjectsHtml,
		"app/pages/projects/projects.html",
	)
}

func appPagesProjectsProjectsHtml() (*asset, error) {
	bytes, err := appPagesProjectsProjectsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/projects/projects.html", size: 269, mode: os.FileMode(420), modTime: time.Unix(1625985346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesProjectsProjectsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x6e\xe2\x30\x10\xbe\xe7\x29\x46\xec\xc1\x89\xb4\x84\x07\x40\xd9\x0b\x5a\xa9\x87\xb6\x42\x82\x9e\x10\x87\xd4\x19\x14\x23\xe3\x49\xc7\x93\x52\x84\xf2\xee\x95\xad\xa4\xc4\x97\x9e\x3c\x99\xf9\x7e\xe6\x27\xda\xd6\xde\xc3\x96\xe9\x8c\x5a\x3c\xdc\x33\x00\x4d\xce\x0b\xf7\x5a\x88\xf3\x22\x66\x00\xa4\x35\xbe\xd4\x64\xfb\x8b\xf3\x50\xc1\x41\xbd\xd6\x17\x54\x7f\x41\xbd\xb1\x0d\xcf\xb6\x96\x36\xbc\xfb\x5b\x17\xd3\x3b\xea\x59\xe3\x86\x9c\x30\x59\x75\x5c\x67\x00\x43\x96\x01\x18\x67\x24\x15\xfd\x34\x78\x85\x0a\x1a\xd2\xfd\x05\x9d\x94\x1f\x3d\xf2\x6d\x87\x16\xa3\xbf\xfa\xd3\x8d\xad\x2d\xad\xf1\xb2\x7c\xa7\xe6\xa6\x8a\x75\x16\xf9\x27\x14\xdd\xe6\x8b\x55\xdd\x99\xd5\x04\x5b\x14\xb1\x04\x50\x4a\x8b\x2e\x67\xf4\x50\xfd\x03\x46\x5f\x9e\x3d\xb9\xbc\x48\xcb\x13\x2b\x60\xee\x63\x65\xd6\x57\x69\x9c\x43\x7e\xda\xbf\x3c\x43\x05\x4a\xad\x7f\x10\x27\x62\xc8\xe3\x9e\x60\x94\x00\x3a\x4d\xa1\x2f\x66\x5a\xe3\x3a\x81\x29\x99\x52\x33\xd6\x82\xff\x2d\x86\xaf\x5c\x09\x87\xa1\x1e\x9c\x99\xbe\x26\x1b\xb4\xe7\x07\x48\xf5\x27\x07\x8d\xd6\xfe\x66\xd1\xa4\x16\x10\x09\xa5\xe0\x97\x84\x33\xa1\x13\xa8\xa6\x09\x0e\x9a\xec\x31\x05\x33\x5d\xcb\xba\xeb\xd0\x35\x9b\xd6\xd8\x26\x0f\xe4\x44\x6f\x98\xc5\x8f\x05\xce\x29\x4c\xd7\x19\x63\xc2\x0f\x45\xfc\x37\x86\xef\x00\x00\x00\xff\xff\xdc\xb1\x2b\xa9\x89\x02\x00\x00")

func appPagesProjectsProjectsJsBytes() ([]byte, error) {
	return bindataRead(
		_appPagesProjectsProjectsJs,
		"app/pages/projects/projects.js",
	)
}

func appPagesProjectsProjectsJs() (*asset, error) {
	bytes, err := appPagesProjectsProjectsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/projects/projects.js", size: 649, mode: os.FileMode(420), modTime: time.Unix(1625984828, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesVersionsVersionsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\x0a\xc3\x30\x0c\x04\xef\x7e\x85\xd1\x3d\xf8\x03\x1b\x3d\xa1\xc7\xde\x9d\x5a\x10\x83\xdb\x80\x25\x0a\xfd\x7d\x51\x6c\x68\x21\xb7\x61\x76\xbd\x16\x76\xc9\x45\x7a\x7c\xb4\xac\xba\x92\x55\x6b\x42\x7c\x97\xae\xf5\x78\x29\xd2\x88\x39\x04\x58\xde\x9a\xc4\x5a\x56\x7a\xcf\x74\x69\x55\x8d\x38\xc4\x08\xf3\x9e\x93\x73\x1f\x70\x6a\xbe\xe5\xa7\x20\xd9\xfe\xef\xe6\xfc\x4f\x23\x8d\x47\x6e\xe6\x10\x6c\x3b\xca\xe7\xfa\xdf\xe2\x9a\x66\xd9\x99\x03\xd2\x79\x1b\x7f\x03\x00\x00\xff\xff\x2a\x1a\xed\xba\xcc\x00\x00\x00")

func appPagesVersionsVersionsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appPagesVersionsVersionsHtml,
		"app/pages/versions/versions.html",
	)
}

func appPagesVersionsVersionsHtml() (*asset, error) {
	bytes, err := appPagesVersionsVersionsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/versions/versions.html", size: 204, mode: os.FileMode(420), modTime: time.Unix(1625987436, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesVersionsVersionsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xb1\xce\x9b\x40\x10\x84\x7b\x9e\x62\xe4\x14\x07\x52\x8c\x1f\xc0\x22\x8d\x15\x29\x45\x92\x26\x51\x1a\xcb\x05\x3e\xd6\xe6\xac\xf3\x2d\xd9\x5b\xec\x58\x16\xef\x1e\x81\xc0\x86\xe6\xef\x60\x77\xbe\x19\x76\x84\xf5\x65\x8c\xf8\x43\x12\x1d\x87\x88\x67\x02\x58\x0e\x51\xa5\xb5\xca\x92\x66\xc3\x04\xd0\xda\xc5\xdc\xb2\x6f\xaf\x21\xa2\xc0\xde\xfc\x2c\xaf\x64\x3e\xc3\x8c\xa4\x39\x24\x40\x97\x24\x80\x0b\x4e\x97\xd8\xcd\xd1\x1d\x05\x2a\xb6\xed\x95\x82\xe6\x7f\x5b\x92\xc7\x2f\xf2\x34\x24\x98\x4f\xb7\x31\x7c\xed\x5d\xd4\xf5\x91\xab\x87\xc9\xb6\xc9\xc0\x9f\x48\x6d\x9d\xae\x36\x65\xe3\x36\x93\x6c\x95\x0d\x2b\x20\xd7\x9a\x42\x2a\x14\x51\x7c\x81\x50\xcc\x2f\x91\x43\x9a\x2d\xd7\x13\xd5\x6b\x9e\xe3\x06\xa8\xe8\xd8\x9e\xcf\x24\xdb\xd7\xe4\xf5\xa5\xb9\x0b\x81\xe4\xdb\xef\x1f\xdf\x51\xc0\x98\xb7\xe2\xc4\x82\x74\xe8\x06\x8d\xf0\x85\xac\x82\x4f\x98\xfc\xb3\x99\xfb\x58\x21\x84\x17\x77\x5b\xa1\x52\xe9\xab\xa7\xfe\x2d\x35\x2a\xfd\x99\x6f\x66\xe6\x6f\xd9\xf7\xde\xf3\xd2\x97\xfe\x53\x82\x25\xef\x3f\x8a\xa8\x96\x11\x18\x80\x5c\xe9\x9f\xee\x38\x28\x05\x45\x31\x1d\xb3\xb7\xec\x0f\x4b\xb1\xf0\x3d\x2f\x9b\x86\x42\xb5\xab\x9d\xaf\xd2\x1e\x5e\xf8\x75\xb3\xe7\x77\x81\x73\x44\xf8\x3e\x23\x26\x7d\x97\x0d\x7f\x4b\xf7\x3f\x00\x00\xff\xff\x83\x51\x72\x23\x7d\x02\x00\x00")

func appPagesVersionsVersionsJsBytes() ([]byte, error) {
	return bindataRead(
		_appPagesVersionsVersionsJs,
		"app/pages/versions/versions.js",
	)
}

func appPagesVersionsVersionsJs() (*asset, error) {
	bytes, err := appPagesVersionsVersionsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/versions/versions.js", size: 637, mode: os.FileMode(420), modTime: time.Unix(1626019339, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x4d\x6e\xad\x30\x0c\x85\xe7\x59\x85\xa5\x37\xce\x15\xaf\xea\xa4\x61\x35\xf9\xf1\x05\x4b\xa9\x8d\x82\x21\xa1\x15\x7b\xaf\x02\xbd\xb3\x0e\xf3\xf9\xe4\x9c\xef\x11\x85\xd5\x13\x63\x81\x6f\x03\x90\x68\x5d\xb2\x3f\x1c\x3c\x33\xb6\x20\x6d\x34\xa7\x31\x8f\xe8\x4b\xba\xce\x9d\xda\x44\x05\xa3\x92\xb0\x83\x22\xf5\x4e\x28\x69\xc6\x3b\x22\xac\x76\xa5\x2f\x74\xf0\xf6\xbe\xb4\xf1\x85\x2a\xd2\x34\xab\x83\x20\x39\x75\xa8\xd8\xd4\x26\x8c\x52\xfc\xdd\xb5\x71\xc2\x92\x89\xb1\x5f\x83\x34\xeb\x33\x4d\xec\x20\x22\x2b\x96\x7b\x26\x6c\xaa\xc2\x36\xf8\x3f\x6c\xc7\x97\xdf\x33\x4b\xbd\xd4\xa0\x16\xbf\x74\x9c\x69\x55\xbb\xea\x91\xd1\xea\xb1\xa0\x03\x96\x3e\x73\x1a\xf3\x6f\x27\xac\x57\xd7\xfc\xeb\xf7\x7f\x18\xf6\xb9\x7f\xaa\x94\x74\x76\xf0\x31\xec\xb5\x3f\x3f\x7d\x99\x88\x1d\xf8\x4d\x65\x34\xe7\x4f\x00\x00\x00\xff\xff\xcd\xd9\x7a\xfe\x38\x01\x00\x00")

func appStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_appStyleCss,
		"app/style.css",
	)
}

func appStyleCss() (*asset, error) {
	bytes, err := appStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/style.css", size: 312, mode: os.FileMode(420), modTime: time.Unix(1625985530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcf\x4e\xf4\x20\x14\xc5\xf7\xdf\x53\xdc\x8f\x4d\x67\x16\x0e\x0f\xe0\x85\xc4\xa8\x89\x3b\x67\x61\x4c\x5c\x52\x7a\xb5\x74\x28\x10\xa0\x8c\x7d\x7b\xd3\xd2\x89\x2e\x5c\xa8\xab\x9e\x9e\xc3\xf9\xf1\x17\xff\xdf\x3d\xde\x3e\xbd\x1c\xef\xa1\xcf\xa3\x95\xff\xb0\x7e\x00\xb0\x27\xd5\x2d\x02\x00\xad\x71\x27\x88\x64\x05\x4b\x79\xb6\x94\x7a\xa2\xcc\xa0\x8f\xf4\x2a\x18\x57\x21\xf0\xd5\x3e\xe8\x94\x18\xf0\xb5\xcc\x2f\x6d\x6c\x7d\x37\x6f\x98\xc9\x82\xb6\x2a\x25\xd1\xb4\x53\xce\xde\x5d\xb5\x2a\x36\x35\x5b\x27\x91\x58\x7d\xf0\x4e\x5b\xa3\x4f\x82\xa9\x10\x0e\x4e\x15\xf3\xa6\x32\xed\x9a\xde\x8f\xd4\xec\x99\x7c\xf0\x23\x21\xaf\x63\x25\x72\x6b\x7e\xc1\x08\xd1\x0f\xa4\x73\x5a\x38\xc7\x4d\xff\x95\x55\x28\x26\xe3\xdd\xca\x7a\xde\xf4\x37\x2c\xe4\x93\xad\xaa\xfe\x76\xa6\x80\xe9\x04\x2b\x86\xce\x4c\x22\xef\x4c\xf9\x1a\x27\x1d\x4d\xc8\x90\xe7\x40\x82\x65\x7a\xcf\x7c\x50\x45\x55\x97\x41\x8a\x7a\x3b\xf3\x51\x19\x77\x18\xd2\x42\xa8\xa1\xfc\x41\xff\xb2\x3b\x15\x02\x08\x70\x74\x86\x9b\x10\x76\xfb\xeb\x6d\xa1\x9f\x20\xe4\xf5\xe2\x90\xaf\x0f\xe2\x23\x00\x00\xff\xff\x47\x03\x91\x02\x27\x02\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 551, mode: os.FileMode(420), modTime: time.Unix(1625987825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app/main.js":                      appMainJs,
	"app/pages/home/home.html":         appPagesHomeHomeHtml,
	"app/pages/home/home.js":           appPagesHomeHomeJs,
	"app/pages/projects/projects.html": appPagesProjectsProjectsHtml,
	"app/pages/projects/projects.js":   appPagesProjectsProjectsJs,
	"app/pages/versions/versions.html": appPagesVersionsVersionsHtml,
	"app/pages/versions/versions.js":   appPagesVersionsVersionsJs,
	"app/style.css":                    appStyleCss,
	"index.html":                       indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"app": &bintree{nil, map[string]*bintree{
		"main.js": &bintree{appMainJs, map[string]*bintree{}},
		"pages": &bintree{nil, map[string]*bintree{
			"home": &bintree{nil, map[string]*bintree{
				"home.html": &bintree{appPagesHomeHomeHtml, map[string]*bintree{}},
				"home.js":   &bintree{appPagesHomeHomeJs, map[string]*bintree{}},
			}},
			"projects": &bintree{nil, map[string]*bintree{
				"projects.html": &bintree{appPagesProjectsProjectsHtml, map[string]*bintree{}},
				"projects.js":   &bintree{appPagesProjectsProjectsJs, map[string]*bintree{}},
			}},
			"versions": &bintree{nil, map[string]*bintree{
				"versions.html": &bintree{appPagesVersionsVersionsHtml, map[string]*bintree{}},
				"versions.js":   &bintree{appPagesVersionsVersionsJs, map[string]*bintree{}},
			}},
		}},
		"style.css": &bintree{appStyleCss, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
