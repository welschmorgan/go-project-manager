// Code generated for package gui by go-bindata DO NOT EDIT. (@generated)
// sources:
// cmd/gui/web-app/app/main.js
// cmd/gui/web-app/app/pages/home/home.html
// cmd/gui/web-app/app/pages/home/home.js
// cmd/gui/web-app/app/pages/projects/projects.html
// cmd/gui/web-app/app/pages/projects/projects.js
// cmd/gui/web-app/app/pages/versions/versions.html
// cmd/gui/web-app/app/pages/versions/versions.js
// cmd/gui/web-app/index.html
// cmd/gui/web-app/styles/dark-theme.css
// cmd/gui/web-app/styles/main.css
package gui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _appMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xb8\x76\x05\x44\x21\x9e\xd2\xed\x31\x82\x36\x14\xc1\xba\x16\x68\x80\x60\x4d\xfb\x52\x14\x28\x4d\x9f\x23\xa6\x34\xa5\x91\x94\x13\x23\xd0\x77\x1f\x8e\x14\x25\xca\x76\xbd\xfa\xc5\x20\xef\x77\xff\x7e\x77\xc7\x93\x50\xdc\x5a\xb8\xe5\xf7\x08\xcf\x0b\x00\xd1\x68\xeb\x4c\x27\x5c\x63\x98\xe6\x5b\x5c\x42\xed\xb6\x6a\x09\x1b\x4e\x57\xfb\xdc\x83\x00\x5c\x2d\x6d\x41\x72\xa8\x80\xfe\xa6\x4b\x82\x43\xe5\xb5\xa6\xcb\x41\x1b\xaa\x68\x67\x12\x49\x6d\x1d\xd7\x82\x0c\x75\x7a\x8d\x1b\xa9\x71\x5d\x2e\x00\xfa\x45\xbf\x58\x84\xe0\xde\xb4\xed\x51\x6c\xb3\x40\x76\x12\x1f\xa1\x82\x75\x23\xba\x2d\x6a\x57\xfc\xdb\xa1\xd9\x7f\x44\x85\x1e\x9a\xfd\x42\xf2\x2c\x2f\x27\x85\x2d\x97\xfa\x06\x75\x77\x4e\x89\x30\xbf\x6e\x51\x77\x33\x4d\xd1\x19\x83\xda\x79\xbe\x2a\xd0\x9d\x52\xa9\x90\x8b\x1a\xd7\x24\xb3\x50\xc1\x97\xaf\x89\x68\xc5\x2d\xde\x49\xa7\x48\x2b\xfb\xf2\xf7\x3f\x1f\x6e\xae\x3e\xbd\xff\x9a\x95\x8b\x09\x62\x9a\xce\x05\x45\x7f\x07\xf0\xec\x6f\xae\x20\xab\x9b\x2d\x66\x4b\x50\x7c\x85\xea\x0a\xb2\x77\x74\xec\x97\x70\x08\x6b\x4d\xf3\x80\xc2\xd9\x04\x7a\x1b\xaf\x4e\xc0\x77\x68\xac\x6c\x74\x0a\xff\x1c\xaf\xfa\xa5\x47\xa7\x19\x08\x83\xdc\x21\xb1\xc6\x52\x42\x34\xdf\xc9\x7b\xee\x90\x85\x28\xf3\x50\xbb\x05\xc0\x28\xa0\xfe\x88\xe5\xf2\x25\x04\x1f\x01\x54\x69\xda\xc5\x46\xea\x35\x33\x50\xfd\x01\xa6\x18\xe4\x55\xe8\xad\xc1\x9b\x45\xe7\x09\x64\xdf\x5e\x3d\xcf\x29\xed\xe1\x55\x48\x0a\xfe\x0c\xa6\x0b\x9f\x0f\x5c\x79\xf5\xfe\x5b\x1a\x2e\xb5\x42\x21\xb5\x46\xf3\xee\xee\xe6\x03\x15\x23\x0b\x52\xb9\x01\x16\x1a\xd2\x52\x01\xaf\x7d\x29\x43\xec\x31\xf8\x18\x7e\x1b\x8a\xef\xd1\xf7\xe8\xae\xc7\xaa\xb3\x24\xdc\x1f\xf9\x23\xe5\x62\x9c\x0e\x08\xe7\x38\x04\x85\xd4\xd2\x45\x7a\x7b\x40\x65\x71\xf4\x6d\xd0\x75\x46\x83\xc6\x47\xb8\x35\xcd\x56\x5a\x64\xcc\xa0\x6d\xd4\x0e\x97\x60\x90\xca\x9c\x13\x7d\x11\x0f\xa0\xd0\x81\x68\x3a\xed\xd0\x40\x05\xaf\xcb\x51\x30\x4b\xc3\x1b\x8c\xc1\x2f\x21\xcb\xf2\x43\xa0\xa8\x51\x7c\x7f\xa3\xd4\x5b\xa9\x7c\x7f\x32\x3c\x70\x04\xd1\xcd\xc5\x45\x99\x5c\x12\xa5\xa3\xff\x0a\x7e\xcf\x67\x2a\xff\x4b\x50\x39\x03\x93\xb1\x8c\xe8\xc9\x40\xea\x39\x6b\x87\x76\xcf\x91\x1a\x7f\xfd\x71\x24\xc9\xf4\x16\x6d\x67\x6b\x46\x56\x0e\xd4\x06\xc2\x43\xa1\x17\xa7\xcc\xf5\x93\x42\x78\xfa\xd0\x89\x9a\x8c\xde\x72\xe3\x22\xc7\x0f\x36\xcb\x0b\x57\xa3\xf6\x25\x6c\x1b\x6d\x03\xa5\x5e\xa3\xd1\x1f\x85\x91\xad\x7b\x4b\x9a\xb8\xf6\x61\x2c\x21\x68\x46\xf4\x72\x5e\x94\x7c\xec\x80\x9f\xf1\x4e\xe4\x9e\xf5\xff\x59\xe2\xe3\xdc\xfb\x4f\xfb\xed\x63\xf3\xc6\x67\x60\x66\x8d\x9a\xe7\xc8\x60\xe8\x90\xa4\xa5\xc6\x0e\x80\x6a\xc4\x95\x8b\xa4\xcd\x18\x51\xdf\x97\xc1\xfc\x8c\xac\xc9\xc1\x11\x5f\x47\x6e\x42\x73\x5b\x61\xd2\x2d\x10\x5e\xb9\xbf\x14\xd2\x89\x65\xd6\x1b\x8f\x23\x61\x85\x29\xdc\xbe\xa5\xa9\x79\xe9\xf0\xc9\x5d\x3e\xf0\x1d\x0f\x90\x97\x09\x02\x9f\xdc\x51\xe4\xa3\x83\x55\xb3\xde\x17\xbc\x6d\x51\xaf\xaf\x6b\xa9\xd6\xcc\x0a\x33\x98\xbf\xbc\x04\xdc\x71\x35\x95\xa4\x9c\xe8\x98\x36\xa8\x87\x50\x76\x85\xa8\xb9\x79\xe3\xd8\xeb\xbc\x70\xcd\xa7\xb6\x45\x73\xcd\x2d\xb2\x1c\x2e\x7c\xf2\x85\xed\x56\xd6\x19\xa9\xef\xd9\x6f\x79\x6a\x2a\xd9\xb8\x34\xfb\x2c\xb5\x9f\xc7\x39\x19\x99\x2e\x47\xaa\xb9\xdd\x6b\x01\xa7\x3a\x0a\x9f\x5c\x9c\xc1\xe1\x95\xf2\x28\x96\xf1\xb6\xbd\x24\xf3\xf6\x32\x1b\xa2\x82\x0b\xc8\x66\x87\x82\x0e\x64\x20\x99\xa6\x53\xad\x19\x0f\x9e\x5e\x96\x4f\x7b\x66\xda\x4b\xef\x1d\x6e\x99\x5f\x00\xc3\x46\x9b\x6f\x1d\x25\xcf\x14\x5a\xc9\x6c\xcc\x9c\xc0\x2b\xa7\xcf\xa0\x57\x9d\x73\x8d\x8e\x1a\x2b\xa7\xc3\x0b\x76\x17\x2a\xef\x7d\x4f\xa2\x46\x0b\x25\xc5\x77\x6a\xcd\x69\xc8\xc6\xed\xe8\xe3\x1d\x0c\x29\x39\xeb\x8c\x95\xd3\xa7\x3e\x5a\x66\x18\x25\x4f\x31\x31\x7e\x1e\x6d\x1a\x43\x6f\xf0\xb4\x74\x9b\x4d\xba\x75\xa7\x97\xf3\x60\xc5\x4f\x54\x16\x03\xa1\xc9\x62\x3d\x1c\xf1\xe3\x8d\x39\x6f\x86\x17\x2f\x7e\xb4\x2a\xa3\x85\x13\xa2\xe3\x04\xfc\xbe\x8a\xf1\x27\x8f\xf5\x94\x04\xed\x08\xdf\xcd\xe1\xcb\x34\x7e\x3f\x24\xeb\x61\x88\x88\x40\xe3\x8b\x95\x26\xd3\xff\x17\x00\x00\xff\xff\xe8\xef\xde\xd3\x0f\x0b\x00\x00")

func appMainJsBytes() ([]byte, error) {
	return bindataRead(
		_appMainJs,
		"app/main.js",
	)
}

func appMainJs() (*asset, error) {
	bytes, err := appMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/main.js", size: 2831, mode: os.FileMode(420), modTime: time.Unix(1626024515, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesHomeHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x48\x4d\x4c\x49\x2d\x52\x48\xce\x49\x2c\x2e\xb6\x55\x2a\xc9\x2c\xc9\x49\x55\xb2\xf3\xc8\xcf\x4d\xb5\xd1\x87\x48\xd9\x71\x71\xd9\xa4\x64\x96\x29\x64\xa6\xd8\x2a\x95\xe7\x17\x65\x17\x17\x24\x26\xa7\xea\x66\xe6\xa5\xe5\x17\x2b\xd9\x71\xd9\xe8\xa7\x64\x96\xd9\x01\x02\x00\x00\xff\xff\xcb\xe9\x0a\x72\x46\x00\x00\x00")

func appPagesHomeHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appPagesHomeHomeHtml,
		"app/pages/home/home.html",
	)
}

func appPagesHomeHomeHtml() (*asset, error) {
	bytes, err := appPagesHomeHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/home/home.html", size: 70, mode: os.FileMode(420), modTime: time.Unix(1626022471, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesHomeHomeJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x8e\xd3\x30\x10\xbe\xe7\x29\x46\xcb\xc1\x89\xb4\x78\x1f\x20\xca\x4a\x68\x05\xda\x03\x7f\x12\xdc\x10\x07\x93\x4c\x14\x83\x33\x0e\xf6\x78\x4b\x45\xfb\xee\xc8\xce\x4f\xdd\x52\xf5\x96\xf1\xf7\x33\x9f\xfd\xa5\x35\xca\x7b\x78\xb6\x23\xc2\xdf\x02\xa0\xb5\xe4\xd9\x85\x96\xad\x2b\xab\x74\x72\x2c\x0a\x00\x4d\x9a\x97\x19\x80\x07\xed\xe5\x8b\xc6\x1d\x34\xd0\xd9\x36\x8c\x48\x2c\x7f\x07\x74\xfb\x2f\x68\x30\x49\xc5\xab\x9d\x75\xbf\xfc\xa4\x5a\x7c\xad\xa9\xb7\x5e\x54\xf5\x49\xbb\x61\xd0\x40\xa0\x0e\x7b\x4d\xd8\xd5\xe7\xde\x52\x13\xa1\x7b\xfe\xfa\xe1\x3d\x34\x20\xc4\x8c\xf6\xc8\xed\x50\x8a\x07\x35\xe9\x87\xcd\x44\x54\x09\x03\x90\x3c\x20\x95\x0e\x3d\x34\x8f\xe0\xd0\xcb\x9f\xde\x52\x59\x9d\xc3\xd9\xee\xc7\xe5\x3e\x57\x73\x6d\xdf\xf5\x39\xa7\x75\xa8\x18\xdf\x69\x34\x5d\x29\x3e\xaa\x11\xd7\x9b\x5d\x67\x7c\x56\x3c\xdc\x66\xbc\x09\x3c\x58\x27\xee\x4f\x1b\xe5\x7c\x24\x49\x8d\xb8\x49\x8f\xe9\x2b\x95\x91\xcb\x23\xe7\x1e\x5e\x94\x09\xb8\xd6\x93\x2a\x84\x3e\xc2\x1e\x39\xef\x68\x16\xbe\x35\x18\xa7\xf2\x6e\xa5\xdc\x2d\x4b\x32\xb5\x51\x3f\xd0\xdc\x90\x26\x7c\xd5\xa5\x41\x32\xfe\xe1\x27\x4b\x8c\x14\x77\xc6\x5c\xff\xb9\x6a\x9a\xc2\xad\x40\x09\x5f\x5d\xd3\x20\x79\x3f\xc5\x36\x44\x74\x17\x39\xe0\x50\x75\x9f\xc8\xec\xa1\x01\x76\x01\x73\x28\xbd\x06\x34\xf3\xab\xc0\xe1\x70\x51\xee\xb7\x98\xed\x7b\x16\x6e\x7d\x07\xa9\xa6\x09\xa9\x7b\x1a\xb4\xe9\xca\x74\xa9\x25\xca\x55\x42\xda\x55\x5d\xfe\xb5\x39\x63\x95\x2d\x24\x87\x1c\x1c\x6d\x66\xa9\xce\xba\x38\xfe\x0b\x00\x00\xff\xff\xd0\x7c\x57\x04\x81\x03\x00\x00")

func appPagesHomeHomeJsBytes() ([]byte, error) {
	return bindataRead(
		_appPagesHomeHomeJs,
		"app/pages/home/home.js",
	)
}

func appPagesHomeHomeJs() (*asset, error) {
	bytes, err := appPagesHomeHomeJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/home/home.js", size: 897, mode: os.FileMode(420), modTime: time.Unix(1626024543, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesProjectsProjectsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x0e\x83\x20\x10\x45\xf7\x9c\x82\xb0\x37\x5c\x60\x9c\x4d\xf7\x8d\x49\xdb\x03\xa0\x4e\x22\x0d\x2d\x66\x98\x2e\xbc\x7d\x33\xc2\xc2\xe8\xee\xe5\xfd\x0f\x7c\x60\xa1\x30\x13\xdb\x29\x85\x52\x7a\x27\x51\x12\x39\x1c\x38\xbf\x69\x92\x02\xbe\xc6\x68\x0c\x48\x18\x13\xd9\x38\xf7\x6e\x6d\x69\x97\x62\x11\x87\xc6\x5a\x10\xed\x29\x29\x73\x85\x5d\xe3\x3d\x7c\x08\xbc\x2c\x47\xf7\xe2\x74\x56\x43\x90\xe5\xec\x9e\xdb\x7a\x39\xfa\xc8\x3f\x9e\xe8\x96\xbf\xc2\xf9\x70\x09\xf8\xfa\xaa\x9a\xb6\x04\x64\xcc\xf3\x76\x1d\xdc\xa9\x76\xad\xac\x8c\x06\xfc\xfe\x39\xfc\x07\x00\x00\xff\xff\x86\xab\x86\xd9\x0d\x01\x00\x00")

func appPagesProjectsProjectsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appPagesProjectsProjectsHtml,
		"app/pages/projects/projects.html",
	)
}

func appPagesProjectsProjectsHtml() (*asset, error) {
	bytes, err := appPagesProjectsProjectsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/projects/projects.html", size: 269, mode: os.FileMode(420), modTime: time.Unix(1625985346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesProjectsProjectsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x6e\xe2\x30\x10\xbe\xe7\x29\x46\xec\xc1\x89\xb4\x84\x07\x40\xd9\x0b\x5a\xa9\x87\xb6\x42\x82\x9e\x10\x87\xd4\x19\x14\x23\xe3\x49\xc7\x93\x52\x84\xf2\xee\x95\xad\xa4\xc4\x97\x9e\x3c\x99\xf9\x7e\xe6\x27\xda\xd6\xde\xc3\x96\xe9\x8c\x5a\x3c\xdc\x33\x00\x4d\xce\x0b\xf7\x5a\x88\xf3\x22\x66\x00\xa4\x35\xbe\xd4\x64\xfb\x8b\xf3\x50\xc1\x41\xbd\xd6\x17\x54\x7f\x41\xbd\xb1\x0d\xcf\xb6\x96\x36\xbc\xfb\x5b\x17\xd3\x3b\xea\x59\xe3\x86\x9c\x30\x59\x75\x5c\x67\x00\x43\x96\x01\x18\x67\x24\x15\xfd\x34\x78\x85\x0a\x1a\xd2\xfd\x05\x9d\x94\x1f\x3d\xf2\x6d\x87\x16\xa3\xbf\xfa\xd3\x8d\xad\x2d\xad\xf1\xb2\x7c\xa7\xe6\xa6\x8a\x75\x16\xf9\x27\x14\xdd\xe6\x8b\x55\xdd\x99\xd5\x04\x5b\x14\xb1\x04\x50\x4a\x8b\x2e\x67\xf4\x50\xfd\x03\x46\x5f\x9e\x3d\xb9\xbc\x48\xcb\x13\x2b\x60\xee\x63\x65\xd6\x57\x69\x9c\x43\x7e\xda\xbf\x3c\x43\x05\x4a\xad\x7f\x10\x27\x62\xc8\xe3\x9e\x60\x94\x00\x3a\x4d\xa1\x2f\x66\x5a\xe3\x3a\x81\x29\x99\x52\x33\xd6\x82\xff\x2d\x86\xaf\x5c\x09\x87\xa1\x1e\x9c\x99\xbe\x26\x1b\xb4\xe7\x07\x48\xf5\x27\x07\x8d\xd6\xfe\x66\xd1\xa4\x16\x10\x09\xa5\xe0\x97\x84\x33\xa1\x13\xa8\xa6\x09\x0e\x9a\xec\x31\x05\x33\x5d\xcb\xba\xeb\xd0\x35\x9b\xd6\xd8\x26\x0f\xe4\x44\x6f\x98\xc5\x8f\x05\xce\x29\x4c\xd7\x19\x63\xc2\x0f\x45\xfc\x37\x86\xef\x00\x00\x00\xff\xff\xdc\xb1\x2b\xa9\x89\x02\x00\x00")

func appPagesProjectsProjectsJsBytes() ([]byte, error) {
	return bindataRead(
		_appPagesProjectsProjectsJs,
		"app/pages/projects/projects.js",
	)
}

func appPagesProjectsProjectsJs() (*asset, error) {
	bytes, err := appPagesProjectsProjectsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/projects/projects.js", size: 649, mode: os.FileMode(420), modTime: time.Unix(1625984828, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesVersionsVersionsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\x0a\xc3\x30\x0c\x04\xef\x7e\x85\xd1\x3d\xf8\x03\x1b\x3d\xa1\xc7\xde\x9d\x5a\x10\x83\xdb\x80\x25\x0a\xfd\x7d\x51\x6c\x68\x21\xb7\x61\x76\xbd\x16\x76\xc9\x45\x7a\x7c\xb4\xac\xba\x92\x55\x6b\x42\x7c\x97\xae\xf5\x78\x29\xd2\x88\x39\x04\x58\xde\x9a\xc4\x5a\x56\x7a\xcf\x74\x69\x55\x8d\x38\xc4\x08\xf3\x9e\x93\x73\x1f\x70\x6a\xbe\xe5\xa7\x20\xd9\xfe\xef\xe6\xfc\x4f\x23\x8d\x47\x6e\xe6\x10\x6c\x3b\xca\xe7\xfa\xdf\xe2\x9a\x66\xd9\x99\x03\xd2\x79\x1b\x7f\x03\x00\x00\xff\xff\x2a\x1a\xed\xba\xcc\x00\x00\x00")

func appPagesVersionsVersionsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appPagesVersionsVersionsHtml,
		"app/pages/versions/versions.html",
	)
}

func appPagesVersionsVersionsHtml() (*asset, error) {
	bytes, err := appPagesVersionsVersionsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/versions/versions.html", size: 204, mode: os.FileMode(420), modTime: time.Unix(1625987436, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPagesVersionsVersionsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x31\x6f\xa3\x40\x10\x85\x7b\x7e\xc5\x93\xaf\x58\x90\xce\xf8\x07\x58\x5c\x63\x9d\x74\xc5\x25\x4d\xa2\x34\x96\x0b\xb2\x8c\xc5\x5a\xeb\x1d\x32\x3b\xd8\xb1\x2c\xfe\x7b\x04\x82\x18\x9a\x74\xb0\xf3\xbe\xf7\x76\x9e\xd6\xfa\x32\x46\xbc\x91\x44\xc7\x21\xe2\x9e\x00\x96\x43\x54\x69\xad\xb2\xa4\xd9\x70\x02\x68\xed\x62\x6e\xd9\xb7\xe7\x10\x51\x60\x6f\x9e\xcb\x33\x99\xdf\x30\x23\x69\x0e\x09\xd0\x25\x09\xe0\x82\xd3\x25\x76\x71\x74\x45\x81\x8a\x6d\x7b\xa6\xa0\xf9\x47\x4b\x72\x7b\x21\x4f\x43\x82\xf9\x75\x19\xc3\xd7\xde\x45\x5d\xbf\x73\x75\x33\xd9\x36\x19\xf8\x23\xa9\xad\xd3\xd5\xa6\x6c\xdc\x66\x92\xad\xb2\x61\x04\xe4\x5a\x53\x48\x85\x22\x8a\x3f\x10\x8a\xf9\x29\x72\x48\xb3\xe5\x78\xa2\x7a\xcd\x7d\x9c\xcc\xee\x95\xbb\x10\x48\xfe\xbd\x3e\xfd\x47\x01\x63\xb6\xdf\x8a\x23\x0b\xd2\xa1\x09\x34\xc2\x27\xb2\x0a\x3e\x62\x72\xcb\x66\x5e\x63\x61\x10\x5e\x6c\x69\x85\x4a\xa5\xbf\x9e\xfa\xbf\xd4\xa8\xf4\x4b\x3d\x98\x99\xbf\x65\xdf\x7b\xcf\x2b\x5e\xfa\x4f\x09\x96\xbc\xff\x29\xa2\x5a\x46\x60\x00\x72\xa5\x4f\xdd\x71\x50\x0a\x8a\x62\x5a\x66\x6f\xd9\x1f\x96\x62\xe1\x6b\x5e\x36\x0d\x85\x6a\x57\x3b\x5f\xa5\x3d\xbc\xf0\xeb\x66\xdf\x8f\x02\xe7\x88\xf0\x75\x46\x4c\xfa\x2e\x1b\xde\x46\xf7\x15\x00\x00\xff\xff\x74\xf8\xd8\x9a\x6b\x02\x00\x00")

func appPagesVersionsVersionsJsBytes() ([]byte, error) {
	return bindataRead(
		_appPagesVersionsVersionsJs,
		"app/pages/versions/versions.js",
	)
}

func appPagesVersionsVersionsJs() (*asset, error) {
	bytes, err := appPagesVersionsVersionsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pages/versions/versions.js", size: 619, mode: os.FileMode(420), modTime: time.Unix(1626021753, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xb1\x52\xc3\x30\x0c\x86\x77\x9e\x42\x68\x29\x0c\x41\x0f\x80\x9d\x3b\x0e\x98\x61\x60\x61\x74\x62\x71\x71\xeb\xb8\x3e\x5b\x49\xc9\xdb\x73\xa9\xc2\xd1\x91\x4e\x96\xa5\xff\xfb\xfd\xfb\x64\x6e\x5f\xde\x9e\x3f\x3e\xdf\x5f\x61\x90\x31\xb6\x37\x46\x0f\x00\x33\xb0\xf3\x6b\x01\x60\x62\x48\x07\x28\x1c\x2d\x56\x59\x22\xd7\x81\x59\x10\x86\xc2\x5f\x16\x49\x5b\xe4\x5d\x39\x34\x32\xf0\xc8\x0f\x7d\xad\x08\x74\x05\x3b\xba\x90\x2e\x28\x43\xbf\x6f\x9b\xee\xe8\x97\xcd\x68\x8a\x10\xbc\xc5\x55\xdb\x8c\x9c\x26\x84\x3e\xba\x5a\xed\xae\x9b\x44\x8e\xa9\xe9\x5c\xd9\x6d\x52\x9a\xa2\x56\x7a\xf5\x61\x3e\xa3\x73\xe0\x13\xb6\x86\x7c\x98\x2f\xc7\xb5\x2f\x21\x0b\xc8\x92\xd9\xa2\xf0\xb7\xd0\xde\xcd\x4e\xbb\x08\xb5\xf4\x16\xc9\xe5\xac\x29\xf7\x75\x75\xd0\x61\xfb\x0f\x5e\x35\x00\x2e\x67\xb0\x90\xf8\x04\x4f\x39\xdf\xdd\x3f\x6e\x41\xff\x8c\x0c\xe9\x5f\x0d\x9d\x37\xf0\x13\x00\x00\xff\xff\xdc\xb4\xe3\x25\x98\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 408, mode: os.FileMode(420), modTime: time.Unix(1626023181, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylesDarkThemeCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x4f\x4f\xe3\x3e\x10\x3d\xd7\x9f\x62\x04\xfa\x89\xdf\xb2\xa4\xb4\xe9\x96\x16\x47\x68\x39\xec\x7d\x0f\x7b\x44\x1c\x9c\xda\x4d\x46\x38\xb6\x65\x1b\x08\xac\xf2\xdd\x57\x76\xfe\xb4\x09\xad\x72\xca\xf8\x79\x9e\xdf\xbc\x67\x3f\x62\x65\xb4\xf5\x70\x55\x7a\x6f\x1c\xbd\xbd\xdd\x6b\xe5\xdd\xbc\xd0\xba\x90\x82\x19\x74\xf3\x9d\xae\x6e\x77\xce\xfd\xdc\xb3\x0a\xe5\xc7\xc3\x6f\x23\xd4\xf7\x3f\x4c\xb9\xab\x8c\x90\x6b\xf8\x4b\x66\xc9\xbb\xc8\x5f\xd0\x27\xb9\xae\x13\x87\x9f\xa8\x0a\x0a\xb9\xb6\x5c\xd8\x50\xca\xc8\xec\xdc\x42\x43\x48\xae\xf9\x47\xe8\x11\x58\x93\x96\x81\xc2\x55\xe0\x80\xc8\x71\x03\x8e\x29\x97\x38\x61\x71\x9f\x91\x99\x44\x25\x92\x52\x60\x51\x7a\x0a\xcb\xf9\x66\x2d\xaa\xac\xdb\xec\xf0\x53\x50\x58\xde\x99\xc8\xc8\x76\x2f\x85\xd5\xaf\x8a\x27\x3b\x2d\xb5\xa5\x70\x99\xa6\x69\x46\x66\xfd\x1f\x63\x2c\xf2\xcf\x1d\x56\x46\x8a\x64\xa7\x95\x67\xa8\x84\x0d\x87\xa9\x58\x9d\xbc\x23\xf7\x25\x85\xbb\xcd\x3a\x36\xac\x98\x2d\x50\x51\x58\x00\x7b\xf5\x3a\x23\x33\xc3\x38\x47\x55\x24\x5e\x1b\x0a\x9b\x45\x04\xf5\xb5\x5c\x7b\xaf\x2b\x0a\x69\x2c\x1f\xb1\x18\x8b\xca\x47\xb9\x28\x25\x85\xf7\x12\xbd\xc8\xc8\xcc\x79\xab\x5f\xc4\xf0\xdf\x4c\xf0\xee\xad\x08\x7b\x06\xd9\x8b\xc5\x7f\xe3\xb3\x4b\xed\x44\x40\x74\xe2\xfa\xb6\xdd\xa8\xc7\xd5\xa3\x7d\xa2\xf6\x09\xaa\xbd\x0e\x5b\x3b\x6c\x54\xb3\x34\x35\x38\x2d\x91\x1f\xc6\x64\x06\x8f\x8e\xc7\xdc\x10\x52\x2e\x27\x2b\xab\x76\x14\x23\xa3\x56\x3f\x7a\x74\x3a\x41\xa7\x27\xd0\xe9\xba\x47\xaf\x4e\xb2\x4e\xd0\x9b\xd1\xe8\x5b\x01\xeb\x93\x76\x74\xe5\x21\x81\x5d\xf5\xa0\xf6\xd7\x36\x7c\xd9\xd9\x69\xf4\xeb\xe1\x6c\x76\x64\xc9\xb9\xd0\xf1\x6d\xf8\x86\x8e\x14\x94\x56\xc1\x9a\x2e\x5d\xad\x95\x87\x70\x75\xc2\xd9\x53\x69\xc5\xfe\xf9\xc8\xd2\xcb\xa5\xd8\x32\x7e\x77\xbc\x4a\x4b\xfd\xd6\xc6\xb5\xc7\xac\x72\xb6\x10\x2d\x06\xab\x62\x12\xe4\x21\x35\x12\xc3\xca\xe4\x22\xc5\x7b\x14\x7a\x3b\xe4\xe2\x86\x3c\xed\x24\x73\x0e\xae\x1f\xe0\x22\x14\x72\x66\x2f\x9e\x6f\xc8\x13\xf2\x71\x69\x42\x71\x3f\x16\xd3\xdf\x94\x5e\xfa\x61\x90\x32\xd0\x16\x56\x7c\x1c\x4c\xa2\xb0\x36\x75\xe7\x50\x43\xc8\x63\x25\x38\x32\xf8\xbf\x42\x35\x08\xb8\x4f\x97\xa6\xfe\xd6\x86\xb5\x7d\x34\x46\xd9\xd8\x46\x0f\x9a\xf8\xa8\xbc\x7a\xaf\x55\x44\x9e\x79\x07\x00\xbe\x9e\xaa\x0d\xfb\x97\x17\xa2\x6d\x36\x4c\x1b\xe0\x44\xcf\x88\x3d\xd9\xb3\x63\x1b\x91\x37\xff\x02\x00\x00\xff\xff\xba\x12\xe6\xc3\x74\x05\x00\x00")

func stylesDarkThemeCssBytes() ([]byte, error) {
	return bindataRead(
		_stylesDarkThemeCss,
		"styles/dark-theme.css",
	)
}

func stylesDarkThemeCss() (*asset, error) {
	bytes, err := stylesDarkThemeCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styles/dark-theme.css", size: 1396, mode: os.FileMode(420), modTime: time.Unix(1626023152, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylesMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x4b\x6e\xf3\x30\x0c\x84\xf7\x3e\x05\x81\x1f\xff\xae\x2a\xd2\xc7\xa6\xf2\x69\x24\x8b\xb1\x09\xc8\xa4\x41\x33\x91\xdd\x22\x77\x2f\x14\x25\x40\x10\x74\x39\xc3\xe1\xc7\x47\x94\xb4\xbf\xc0\x64\x73\x86\x9f\x0e\x60\x42\x1a\x27\xf3\xf0\x76\x38\x9c\xa7\xbe\x03\x28\x94\x6c\x6a\xba\x54\x3d\x07\x1d\x89\x3d\x1c\xaa\x58\x42\x4a\xc4\xe3\x4d\xc9\x19\xf5\x98\xa5\x78\x98\x28\x25\xe4\xbe\xbb\x74\xdd\xbf\x33\x61\x79\x46\xff\x7f\x20\x7f\x3d\x81\xc3\xc9\xe4\xda\xf9\x3a\x08\x5b\x20\x46\xbd\xb6\x27\x5a\x97\x1c\x76\x0f\xc7\x8c\x5b\x94\xed\x96\x09\x9a\xae\xe5\xea\xba\x44\x8a\x83\x91\xb0\x07\x95\xd2\x12\x46\x96\xb1\x45\x84\xcd\xad\xf4\x8d\x1e\xde\x3f\x97\xad\xbf\x5b\xe5\xb6\x58\x94\x9c\xaa\x69\xb8\x99\x4b\x38\x88\x86\xc6\x3a\x71\x42\xcd\xc4\x58\xab\x51\x36\x17\x32\x8d\xec\x61\x40\x36\xd4\x87\x47\xb8\x28\x66\x32\x7b\xf8\x50\x9c\xdb\xf8\x78\x32\x13\x76\x31\xfc\x71\x45\x7f\xdf\xbb\x7d\x4d\xa5\x40\xd1\xb0\x54\x3b\xd3\x6a\x6e\xb5\x3d\xa3\xb3\x7d\x41\x0f\x2c\x75\xfc\xe5\x37\x00\x00\xff\xff\x55\x4d\x57\x3a\xaf\x01\x00\x00")

func stylesMainCssBytes() ([]byte, error) {
	return bindataRead(
		_stylesMainCss,
		"styles/main.css",
	)
}

func stylesMainCss() (*asset, error) {
	bytes, err := stylesMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styles/main.css", size: 431, mode: os.FileMode(420), modTime: time.Unix(1626023215, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app/main.js":                      appMainJs,
	"app/pages/home/home.html":         appPagesHomeHomeHtml,
	"app/pages/home/home.js":           appPagesHomeHomeJs,
	"app/pages/projects/projects.html": appPagesProjectsProjectsHtml,
	"app/pages/projects/projects.js":   appPagesProjectsProjectsJs,
	"app/pages/versions/versions.html": appPagesVersionsVersionsHtml,
	"app/pages/versions/versions.js":   appPagesVersionsVersionsJs,
	"index.html":                       indexHtml,
	"styles/dark-theme.css":            stylesDarkThemeCss,
	"styles/main.css":                  stylesMainCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"app": &bintree{nil, map[string]*bintree{
		"main.js": &bintree{appMainJs, map[string]*bintree{}},
		"pages": &bintree{nil, map[string]*bintree{
			"home": &bintree{nil, map[string]*bintree{
				"home.html": &bintree{appPagesHomeHomeHtml, map[string]*bintree{}},
				"home.js":   &bintree{appPagesHomeHomeJs, map[string]*bintree{}},
			}},
			"projects": &bintree{nil, map[string]*bintree{
				"projects.html": &bintree{appPagesProjectsProjectsHtml, map[string]*bintree{}},
				"projects.js":   &bintree{appPagesProjectsProjectsJs, map[string]*bintree{}},
			}},
			"versions": &bintree{nil, map[string]*bintree{
				"versions.html": &bintree{appPagesVersionsVersionsHtml, map[string]*bintree{}},
				"versions.js":   &bintree{appPagesVersionsVersionsJs, map[string]*bintree{}},
			}},
		}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"styles": &bintree{nil, map[string]*bintree{
		"dark-theme.css": &bintree{stylesDarkThemeCss, map[string]*bintree{}},
		"main.css":       &bintree{stylesMainCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
